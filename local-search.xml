<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>行为型模式</title>
    <link href="/2022/03/03/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/03/03/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><ul><li>内容：使多个对象都有机会处理请求，避免了请求发送者和接受者之间的耦合关系，将对象练成一条链，沿着链传递请求直到有对象处理为止</li><li>优点：<ul><li>降低耦合度，一个对象无需知道是其他哪一个对象处理其请求<div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">handler_leave</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">GeneralManager</span><span class="token punctuation">(</span>Handler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">handler_leave</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> day <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"you can leave </span><span class="token interpolation"><span class="token punctuation">&#123;</span>day<span class="token punctuation">:</span><span class="token format-spec"> .1f</span><span class="token punctuation">&#125;</span></span><span class="token string"> days"</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"quit, please"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DepartmentManager</span><span class="token punctuation">(</span>Handler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> GeneralManager<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">handler_leave</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> day <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"you can leave </span><span class="token interpolation"><span class="token punctuation">&#123;</span>day<span class="token punctuation">:</span><span class="token format-spec"> .1f</span><span class="token punctuation">&#125;</span></span><span class="token string"> day"</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>handler_leave<span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ProjectDirector</span><span class="token punctuation">(</span>Handler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> DepartmentManager<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">handle_leave</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> day <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"you can leave </span><span class="token interpolation"><span class="token punctuation">&#123;</span>day<span class="token punctuation">:</span><span class="token format-spec"> .1f</span><span class="token punctuation">&#125;</span></span><span class="token string"> day"</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>handler_leave<span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token comment"># client</span>day <span class="token operator">=</span> <span class="token number">4</span>h <span class="token operator">=</span> ProjectDirector<span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span>handle_leave<span class="token punctuation">(</span>day<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul></li></ul><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ul><li>内容：定义对象之间的一种一对多的依赖关系，当一个对象的状态发生改变时，所以依赖的对象都得到通知并被自动更新，又称“发布-订阅”模式</li><li>优点：<ul><li>目标和观察者之间的抽象耦合度很小，支持广播通信<div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> notice<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Notice</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init_</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">attach</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>observers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">detach</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>observes<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">notify</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> obs <span class="token keyword">in</span> self<span class="token punctuation">.</span>observers<span class="token punctuation">:</span>            obs<span class="token punctuation">.</span>update<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">StaffNotice</span><span class="token punctuation">(</span>Notice<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> company_info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__compay_info <span class="token operator">=</span> company_info    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">company_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__company_info    <span class="token comment"># 装饰器更新私有属性值</span>    <span class="token decorator annotation punctuation">@company_info<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">company_info</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__company_info <span class="token operator">=</span> info        self<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Staff</span><span class="token punctuation">(</span>Observer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>company_info <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> notice<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>company_info <span class="token operator">=</span> notice<span class="token punctuation">.</span>company_info<span class="token comment"># client</span>notice <span class="token operator">=</span> StaffNotice<span class="token punctuation">(</span><span class="token string">"company info"</span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> Staff<span class="token punctuation">(</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Staff<span class="token punctuation">(</span><span class="token punctuation">)</span>notice<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>notice<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>notice<span class="token punctuation">.</span>company_info <span class="token operator">=</span> <span class="token string">"new company info"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>company_info<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul></li></ul><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><ul><li>内容：定义一系列算法，将其一个个封装，使其可以互相替换，使得算法独立于客户而变化。</li><li>优点：   <ul><li>定义了一系列可以重用的算法和行为，消除了条件语句</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Strategy</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">FastStrategy</span><span class="token punctuation">(</span>Strategy<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"fast strategy&#123;data: s&#125;"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">SlowStrategy</span><span class="token punctuation">(</span>Strategy<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"slow strategy&#123;data: s&#125;"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Context</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strategy<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        self<span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy    <span class="token keyword">def</span> <span class="token function">set_strategy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strategy<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy    <span class="token keyword">def</span> <span class="token function">do_strategy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strategy<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token comment"># client</span>data <span class="token operator">=</span> <span class="token string">"..."</span>s1 <span class="token operator">=</span> FastStrategy<span class="token punctuation">(</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> SlowStrategy<span class="token punctuation">(</span><span class="token punctuation">)</span>context <span class="token operator">=</span> Context<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> data<span class="token punctuation">)</span>context<span class="token punctuation">.</span>do_strategy<span class="token punctuation">(</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>set_strategy<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>context<span class="token punctuation">.</span>do_strategy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><ul><li>内容：定义了一个操作的算法的框架，而将一些步骤延迟到了子类中，使得子类可以不改变算法的结构即可重新定义算法的某些特定步骤</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">DatasetValid</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> Path<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>exist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> FileNotFoundError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"not found path</span><span class="token interpolation"><span class="token punctuation">&#123;</span>root<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> root        self<span class="token punctuation">.</span><span class="token builtin">set</span> <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">valid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">__get_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>码力升级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结构型模式</title>
    <link href="/2022/03/02/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/03/02/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><ul><li>内容：将一个类的接口转换成客户希望的另一个接口，使由于接口不兼容而无法共同工作的类可以协作</li><li>实现方式：<ul><li>类适配器：多继承</li><li>对象适配器：组合</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Alipay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"支付宝支付</span><span class="token interpolation"><span class="token punctuation">&#123;</span>money<span class="token punctuation">:</span><span class="token format-spec"> d</span><span class="token punctuation">&#125;</span></span><span class="token string">元"</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">WechatPay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"微信支付</span><span class="token interpolation"><span class="token punctuation">&#123;</span>money<span class="token punctuation">:</span><span class="token format-spec"> d</span><span class="token punctuation">&#125;</span></span><span class="token string">元"</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BankPay</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cost</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"银联支付</span><span class="token interpolation"><span class="token punctuation">&#123;</span>money<span class="token punctuation">:</span><span class="token format-spec"> d</span><span class="token punctuation">&#125;</span></span><span class="token string">元"</span></span><span class="token punctuation">)</span><span class="token comment"># 使用多继承实现适配器，使接口保持了一致</span><span class="token keyword">class</span> <span class="token class-name">InheritBankPay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">,</span> BankPay<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cost<span class="token punctuation">(</span>money<span class="token punctuation">)</span>p1 <span class="token operator">=</span> InheritBankPay<span class="token punctuation">(</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>pay<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token comment"># 使用组合类实现适配器，使接口保持了一致</span><span class="token keyword">class</span> <span class="token class-name">CompositeBankPay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> payment<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>payment <span class="token operator">=</span> payment    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>payment<span class="token punctuation">.</span>cost<span class="token punctuation">(</span>money<span class="token punctuation">)</span>p2 <span class="token operator">=</span> CompositeBankPay<span class="token punctuation">(</span>BankPay<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p2<span class="token punctuation">.</span>pay<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="桥模式"><a href="#桥模式" class="headerlink" title="桥模式"></a>桥模式</h2><ul><li>内容：将一个事物的两个维度分离，使其可以独立的变化, 可以很便利的在不同维度添加对象</li><li>优点：<ul><li>抽象和实现相互分离</li><li>优秀的扩展能力</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Shape</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeat<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>color <span class="token operator">=</span> color    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Color</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">paint</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> shape<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span>Shape<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"rectangle"</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>color<span class="token punctuation">.</span>paint<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span>Shape<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"Triangle"</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>color<span class="token punctuation">.</span>paint<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Red</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">paint</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> shape<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"red </span><span class="token interpolation"><span class="token punctuation">&#123;</span>shape<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Green</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">paint</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> shape<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"green </span><span class="token interpolation"><span class="token punctuation">&#123;</span>shape<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>shape1 <span class="token operator">=</span> Rectangle<span class="token punctuation">(</span>Green<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shape1<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>shape2 <span class="token operator">=</span> Triangle<span class="token punctuation">(</span>Red<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shape2<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><ul><li>内容：将对象组合成树形结构以表示“部分-整体”的层次结构，使得单个对象和组合对象的使用具有一致性。</li><li>优点：<ul><li>定义了包含基本对象和组合对象的层次结构</li><li>简化了客户端代码，使客户端可以一致使用组合对象和单个对象</li><li>更容易增加新类型的组件</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Graphic</span><span class="token punctuation">(</span>meataclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">Point</span><span class="token punctuation">(</span>Graphic<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"point(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>x<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>y<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Line</span><span class="token punctuation">(</span>Graphic<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>p1 <span class="token operator">=</span> p1        self<span class="token punctuation">.</span>p2 <span class="token operator">=</span> p2    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"line[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>p1<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>p2<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Picture</span><span class="token punctuation">(</span>Graphic<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> g <span class="token keyword">in</span> iterable<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>g<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> graphic<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span>grapic<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----compisition graphic-----"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> g <span class="token keyword">in</span> self<span class="token punctuation">.</span>childern<span class="token punctuation">:</span>            g<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----compisition graphic-----"</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>l1 <span class="token operator">=</span> Line<span class="token punctuation">(</span>Point<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Point<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>l2 <span class="token operator">=</span> Line<span class="token punctuation">(</span>Point<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pic1 <span class="token operator">=</span> Picture<span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><ul><li>内容：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，使得这一子系统更加容易使用。<div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CPU</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"cpu is running"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">stop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"cpu stop run"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Disk</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"disk is running"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">stop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"disk stop run"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Memory</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"memory is running"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">stop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"memory stop run"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cpu <span class="token operator">=</span>  CPU<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>disk <span class="token operator">=</span> Disk        self<span class="token punctuation">.</span>memory <span class="token operator">=</span> Memory        <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cpu<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>disk<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">stop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cpu<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>disk<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>computer <span class="token operator">=</span> Computer<span class="token punctuation">(</span><span class="token punctuation">)</span>computer<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>computer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ul><li>内容：为其他对象提供一种代理以控制对这个对象的访问</li><li>优点：<ul><li>实代理:可以隐藏对象位于远程地址空间的事实</li><li>虚代理:可以进行优化，节省不必要的系统开销</li><li>保护代理：允许访问对象时进行附加处理</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">set_content</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">RealProxy</span><span class="token punctuation">(</span>Subject<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename <span class="token operator">=</span> filename        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>content        <span class="token keyword">def</span> <span class="token function">set_content</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment"># 虚代理实现内存节省</span><span class="token keyword">class</span> <span class="token class-name">VirtualProxy</span><span class="token punctuation">(</span>Subject<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename <span class="token operator">=</span> filename        self<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>content<span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>content     <span class="token keyword">def</span> <span class="token function">set_content</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment"># 保护代理</span><span class="token keyword">class</span> <span class="token class-name">ProtectedProxy</span><span class="token punctuation">(</span>Subject<span class="token punctuation">)</span>；    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename <span class="token operator">=</span> filename        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>content        <span class="token keyword">def</span> <span class="token function">set_content</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> PermissionError<span class="token punctuation">(</span><span class="token string">"no permission to write content"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>码力升级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建型模式</title>
    <link href="/2022/03/02/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/03/02/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul><li>内容：不要向客户类暴露对象创建的细节，而是工厂类负责创建产品类的实例</li><li>优点：<ul><li>隐藏了对象创建的实现细节</li><li>客户类不需要修改代码</li></ul></li><li>缺点：<ul><li>违背了单一职责原则，将创建逻辑集中到了一个类中</li><li>添加新产品时，需要修改工厂类代码，违背了开闭原则</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">PaymentFactory</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">create_payment</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">"alipay"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Alipay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">"wechat"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> WechatPay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># elif new method"</span>        <span class="token comment"># new class </span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"No such payment named </span><span class="token interpolation"><span class="token punctuation">&#123;</span>method<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><ul><li>内容：定义了创建对象的抽象接口（工厂接口）</li><li>优点：<ul><li>每个具体产品都对应一个具体工厂类，不需要修改工厂类代码</li><li>隐藏了对象创建的具体细节</li></ul></li><li>缺点：<ul><li>每增加一个具体产品类，就需要增加一个相应的具体工厂类</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">PaymentFactory</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">create_payment</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">AlipayFactory</span><span class="token punctuation">(</span>PaymentFactory<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">create_payment</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Alipay<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">WechatFactory</span><span class="token punctuation">(</span>PaymentFactory<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">create_payment</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> WechatPay<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><ul><li>内容：定义了工厂类接口，使工厂子类创建一系列相关或者相互依赖的对象，相比工厂方法模式，抽象工厂模式中每一个具体具体工厂都生产一套产品</li><li>优点：<ul><li>将客户端与类的具体实现相分离</li><li>每个工厂都创建一个完整的产品系列，便于交换产品</li><li>有利于产品的一致性</li></ul></li><li>缺点：<ul><li>难以支持新种类的产品</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMata<span class="token punctuation">,</span> abstractmethod<span class="token comment"># 抽象产品 </span><span class="token keyword">class</span> <span class="token class-name">PhoneShell</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">show_shell</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">CPU</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">show_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">OS</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">show_os</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token comment"># 抽象工厂</span><span class="token keyword">class</span> <span class="token class-name">PhoneFactory</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">make_shell</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token decorator annotation punctuation">@abstractmethod</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">make_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token decorator annotation punctuation">@abstractmethod</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">make_os</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token comment"># 具体产品</span><span class="token keyword">class</span> <span class="token class-name">SmallShell</span><span class="token punctuation">(</span>PhoneShell<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_shell</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"small shell"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BigShell</span><span class="token punctuation">(</span>PhoneShell<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_shell</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"big shell"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AppleShell</span><span class="token punctuation">(</span>PhoneShell<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_shell</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'apple shell'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">SnapDragonCPU</span><span class="token punctuation">(</span>CPU<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'snapdragon cpu'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AppleCPU</span><span class="token punctuation">(</span>CPU<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'apple cpu'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Android</span><span class="token punctuation">(</span>OS<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_os</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ios os'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">IOS</span><span class="token punctuation">(</span>OS<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_os</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ios os'</span><span class="token punctuation">)</span>        <span class="token comment"># 具体工厂</span><span class="token keyword">class</span> <span class="token class-name">MiFactory</span><span class="token punctuation">(</span>PhoneFactory<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">make_shell</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> BigShell<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">make_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> SnapDragonCPU<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_os</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Android<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">IPhone</span><span class="token punctuation">(</span>PhoneFactory<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">make_shell</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AppleShell<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AppleCPU<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_os</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>  IOS<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 客户端</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> shell<span class="token punctuation">,</span> cpu<span class="token punctuation">,</span> os<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu        self<span class="token punctuation">.</span>os <span class="token operator">=</span> os        self<span class="token punctuation">.</span>shell <span class="token operator">=</span> shell    <span class="token keyword">def</span> <span class="token function">show_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"手机信息"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cpu<span class="token punctuation">.</span>show_cpu<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>os<span class="token punctuation">.</span>show_os<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>shell<span class="token punctuation">.</span>show_shell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">make_phone</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">:</span>    cpu <span class="token operator">=</span> factory<span class="token punctuation">.</span>make_cpu<span class="token punctuation">(</span><span class="token punctuation">)</span>    os <span class="token operator">=</span> factory<span class="token punctuation">.</span>make_os<span class="token punctuation">(</span><span class="token punctuation">)</span>    shell <span class="token operator">=</span> factory<span class="token punctuation">.</span>make_shell<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Phone<span class="token punctuation">(</span>shell<span class="token punctuation">,</span> cpu<span class="token punctuation">,</span> os<span class="token punctuation">)</span>p1 <span class="token operator">=</span> make_phone<span class="token punctuation">(</span>MiFactory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>show_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><ul><li>内容：将一个复杂对象的构建与它的表示分离，是使得不同的构建过程可以创建不同的表示；与抽象工厂模式相比，建造者模式着重于一步步构建复杂对象，而抽象工厂模式着重于创建多个系列的产品对象</li><li>优点：<ul><li>隐藏了产品的内部结构和装配过程</li><li>将构造代码与表示代码分离</li><li>可以对构造过程进行更精细的控制</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Player</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> face <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> body <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> arm <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> leg <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>face <span class="token operator">=</span> face        self<span class="token punctuation">.</span>leg <span class="token operator">=</span> leg        self<span class="token punctuation">.</span>arm <span class="token operator">=</span> arm        self<span class="token punctuation">.</span>leg <span class="token operator">=</span> leg        <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>face<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>body<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>arm<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>leg<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token keyword">class</span> <span class="token class-name">PlayerBuilder</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">build_face</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">build_body</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">build_arm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">build_leg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">SexyGirlBuild</span><span class="token punctuation">(</span>PlayerBuilder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>player <span class="token operator">=</span> Player<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">build_face</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>player<span class="token punctuation">.</span>face <span class="token operator">=</span> <span class="token string">"cute face"</span>    <span class="token keyword">def</span> <span class="token function">build_body</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>player<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"thin body"</span>    <span class="token keyword">def</span> <span class="token function">build_arm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>player<span class="token punctuation">.</span>arm <span class="token operator">=</span> <span class="token string">"snow arm"</span>    <span class="token keyword">def</span> <span class="token function">build_leg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>player<span class="token punctuation">.</span>leg <span class="token operator">=</span> <span class="token string">"long leg"</span><span class="token comment"># 控制组装顺序</span><span class="token keyword">class</span> <span class="token class-name">PlayerDirector</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">build_player</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> builder<span class="token punctuation">)</span><span class="token punctuation">:</span>        builder<span class="token punctuation">.</span>build_body<span class="token punctuation">(</span><span class="token punctuation">)</span>        builder<span class="token punctuation">.</span>build_face<span class="token punctuation">(</span><span class="token punctuation">)</span>        builder<span class="token punctuation">.</span>build_arm<span class="token punctuation">(</span><span class="token punctuation">)</span>        builder<span class="token punctuation">.</span>build_leg<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span>player<span class="token comment"># client</span>builder <span class="token operator">=</span> SexyGirlBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span>director <span class="token operator">=</span> PlayerDirector<span class="token punctuation">(</span><span class="token punctuation">)</span>p <span class="token operator">=</span> director<span class="token punctuation">.</span>build_player<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul><li>内容：保证一个类只有一个实例，并提供一个全局访问点去访问</li><li>优点：<ul><li>对唯一实例受控访问</li><li>单例相当于全局变量，防止了命名空间被污染</li></ul></li><li>应用场景：<ul><li>操作系统的文件系统</li><li>日志系统，只能有一个日志</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token string">"_instance"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>            <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance<span class="token keyword">class</span> <span class="token class-name">Myclass</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>c <span class="token operator">=</span> ca <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>b <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment"># 唯一实例：a, b 实例的 c 属性保持一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="创建型模式小结"><a href="#创建型模式小结" class="headerlink" title="创建型模式小结"></a>创建型模式小结</h2><ul><li>创建型模式包括工厂模式、抽象工厂模式、单例模式、建造者模式，原型模式、单例模式五类，主要用于对象的创建。</li><li>抽象工厂模式和建造者模式相对于简单工厂模式和工厂模式而言更灵活、更复杂。</li><li>通常优先使用简单工厂模式或工厂模式，需要更大的灵活性时根据需求使用建造者模式或者抽象工厂模式。</li></ul>]]></content>
    
    
    <categories>
      
      <category>码力升级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>科研绘图工具</title>
    <link href="/2022/03/01/%E7%A7%91%E7%A0%94%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/03/01/%E7%A7%91%E7%A0%94%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="Scienceplot-科研绘图工具"><a href="#Scienceplot-科研绘图工具" class="headerlink" title="Scienceplot 科研绘图工具"></a>Scienceplot 科研绘图工具</h1>]]></content>
    
    
    <categories>
      
      <category>实用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2022/03/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/03/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-设计模式"><a href="#Python-设计模式" class="headerlink" title="Python 设计模式"></a>Python 设计模式</h1><h2 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h2><ul><li>封装：将数据属性封装在类内</li><li>继承：类代码重用的一种方式</li><li>多态：继承的类具有多种形态，python 是多态语言 </li></ul><h2 id="接口规范模板"><a href="#接口规范模板" class="headerlink" title="接口规范模板"></a>接口规范模板</h2><p>接口：若干抽象方法的集合</p><ul><li>限制实现的接口的类必须安装规定的调用方式实现代码</li><li>对高层模块隐藏类的内部实现</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Alipay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"支付宝支付</span><span class="token interpolation"><span class="token punctuation">&#123;</span>money<span class="token punctuation">:</span><span class="token format-spec">4.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">元"</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">WechatPay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"微信支付</span><span class="token interpolation"><span class="token punctuation">&#123;</span>money<span class="token punctuation">:</span><span class="token format-spec">4.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">元"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="面向对象设计-SOLID-原则"><a href="#面向对象设计-SOLID-原则" class="headerlink" title="面向对象设计 SOLID 原则"></a>面向对象设计 SOLID 原则</h2><ul><li>开放封闭原则：软件实体应尽量在不改动原有代码的情况下扩展</li><li>里氏替换原则：所有引用父类的地方必须透明的使用子类的对象，即方法重写时必须保证接口一致</li><li>依赖倒置原则：高层模块不应该依赖底层模块，二者都应该依赖抽象类接口，针对接口编程</li><li>接口隔离原则：使用多个专门接口，而不使用单一的总接口</li><li>单一职责原则：不要存在多于一个导致类变更的原因，即使类变更的原因只能有一个</li></ul>]]></content>
    
    
    <categories>
      
      <category>码力升级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模型落地</title>
    <link href="/2022/02/22/%E6%A8%A1%E5%9E%8B%E8%90%BD%E5%9C%B0/"/>
    <url>/2022/02/22/%E6%A8%A1%E5%9E%8B%E8%90%BD%E5%9C%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Pytorch-模型落地"><a href="#Pytorch-模型落地" class="headerlink" title="Pytorch 模型落地"></a>Pytorch 模型落地</h1><h2 id="Tensorrt-模型构建方案"><a href="#Tensorrt-模型构建方案" class="headerlink" title="Tensorrt 模型构建方案"></a>Tensorrt 模型构建方案</h2><ul><li><a href="https://github.com/search?q=tensorrt">Tensorrt</a>: Nvidia 提供的 C++ 语言的深度学习模型推理方案，模型实现难度大。</li><li><a href="https://github.com/wang-xinyu/tensorrtx">TensorrtX</a>: 基于 tensorrt, 使用 C++ 硬代码实现了经典视觉模型，应用方便但扩展性极低。</li><li><a href="https://github.com/NVIDIA-AI-IOT/torch2trt">Torch2Trt</a>: Nvidia 公司 IOT 部门开源方案，提供 Python 端的操作实现方案，应用方便但无法跨硬件加速设备。</li><li><a href="https://github.com/shouxieai/tensorRT_Pro">TensorRt_Pro</a>: 基于 ONNX 路线，提供了 C++、Python 接口，但目前 ONNX 并无法支持 Pytorch 的全部操作。</li></ul><h2 id="ONNX-模型转换指导"><a href="#ONNX-模型转换指导" class="headerlink" title="ONNX 模型转换指导"></a>ONNX 模型转换指导</h2><ol><li>对于包含 shape、size 返回值的参数， 必须使用 int 进行规格化。</li><li>对于 Upsample, functional.interpolate 函数，使用 scale_factor 指定倍率而非使用 size 指定大小。</li><li>对于 reshape、view 等操作，-1 的指定设置在 batch 维度，其他维度计算得出。</li><li>使用 torch.onnx.export 函数时，dynamic_axes 参数指南指定 batch 维度。</li></ol><p>注: 这些做法的必要性在于简化过程复杂度去掉 gather, shape 等节点。</p>   <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>          <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>numel <span class="token operator">//</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="动态模型处理"><a href="#动态模型处理" class="headerlink" title="动态模型处理"></a>动态模型处理</h2><ul><li>动态 batch<br>源自 TensorRT 编译时将 batch 固化，耗时固定，因此需要采用导出 batch。<ul><li>onnx 导出模型时，view 操作不能固定 batch 维度数值，改写成 -1</li><li>onnx 导出模型时，通常可以指定 dynamic_axes, 实际不指定也没有关系</li></ul></li><li>动态宽高<br>同上，源自模型编译时会将宽高固化，若后续宽高变化，则会影响使用，因此需要动态宽高的存在。<ul><li>使用 TRT::compile 函数的 inputsDimsSetup 参数定义输入的 shape</li><li>使用 TRT::set_layer_hook_reshape 钩子动态修改 reshape 的参数实现</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>模型部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tensorrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 日志处理</title>
    <link href="/2022/02/20/loguru%E5%BA%93/"/>
    <url>/2022/02/20/loguru%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-日志处理-Loguru-库"><a href="#Python-日志处理-Loguru-库" class="headerlink" title="Python 日志处理: Loguru 库"></a>Python 日志处理: Loguru 库</h1><h2 id="日志写入"><a href="#日志写入" class="headerlink" title="日志写入"></a>日志写入</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> loguru <span class="token keyword">import</span> logger<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Pathlogger_formate <span class="token operator">=</span> <span class="token string">"&#123;time&#125; - &#123;level&#125; - &#123;file&#125; - &#123;line&#125; - &#123;message&#125;"</span>logger<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">"logpath.log"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> formate <span class="token operator">=</span> logger_formate<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"debug message"</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"info level message"</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"warning level message"</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">"critical level message"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="分类处理"><a href="#分类处理" class="headerlink" title="分类处理"></a>分类处理</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> loguru <span class="token keyword">import</span> logger<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Pathlog_dir <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">not</span> log_dir<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    log_dir<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    log_format <span class="token operator">=</span> <span class="token string">"&#123;time:YYYY-MM-DD HH:mm:ss&#125; - &#123;level:8&#125;- &#123;file:10&#125; - &#123;line:5&#125; - &#123;message&#125;"</span>logger<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>log_dir<span class="token punctuation">,</span> Path<span class="token punctuation">(</span><span class="token string">"&#123;time:YYYY-MM-DD&#125;.log"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">format</span> <span class="token operator">=</span> log_format<span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token string">"3 day"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>实用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown规范</title>
    <link href="/2022/02/20/markdown%E8%A7%84%E8%8C%83/"/>
    <url>/2022/02/20/markdown%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-编写规范"><a href="#Markdown-编写规范" class="headerlink" title="Markdown 编写规范"></a>Markdown 编写规范</h1><p>采用 GFM, 以及百度 fex-team 团队规范格式编写所有 markdown 文件。</p><h2 id="文件规范"><a href="#文件规范" class="headerlink" title="文件规范"></a>文件规范</h2><ul><li>文件后缀必须使用 .md</li><li>文件名必须使用小写</li><li>文件编码必须使用 UTF-8</li><li>文件标题书写采用如下规范, 使用 26个 = 号隔开</li></ul><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important">Markdown 规范<span class="token punctuation">==========================</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="章节规范"><a href="#章节规范" class="headerlink" title="章节规范"></a>章节规范</h2><ul><li>章节标题必须以 ## 开始</li><li>章节标题与内容之间必须包含一个空行</li></ul><h2 id="表格规范"><a href="#表格规范" class="headerlink" title="表格规范"></a>表格规范</h2><ul><li>使用 - 和 | 符号创建表格, 表格与内容之间插入空行</li></ul><table><thead><tr><th>第一行</th><th>第二行</th></tr></thead><tbody><tr><td>内容1</td><td>内容2</td></tr><tr><td>内容3</td><td>内容4</td></tr></tbody></table><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">第一行 | 第二行 ----- | ----- 内容1 | 内容2 内容3 | 内容4 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ul><li>代码块插入使用连续两个 ``` </li><li>代码块中插入 ``` 代码时使用 ````代替</li><li>代码块与文本之间插入空行</li></ul><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code"><span class="token punctuation">```</span><span class="token code-language"> markdown [文本块](超链接)</span><span class="token code-block language-markdown"><span class="token title important"><span class="token punctuation">##</span> 演示使用</span></span><span class="token punctuation">```</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h2 id="正文规范"><a href="#正文规范" class="headerlink" title="正文规范"></a>正文规范</h2><ul><li>英文和数字使用半角字符</li><li>中文文字之间不使用空格</li><li>中文文字与英文、阿拉伯数字及 @ $ % ^ &amp; * . () 之间使用空格</li><li>中文标点之间不加空格</li><li>中文标点与前后字符之间均不加空格</li><li>若括号内有中文，使用中文括号</li><li>若括号内全部为英文，则使用半角英文符号</li><li>使用直角引号 (「」) 代替双引号</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://gfm.docschina.org/zh-hans/">GFM</a> : Github建议使用的markdown文件书写规范</p>]]></content>
    
    
    <categories>
      
      <category>书写规范</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 不同路径 II</title>
    <link href="/2022/02/19/leetcode63/"/>
    <url>/2022/02/19/leetcode63/</url>
    
    <content type="html"><![CDATA[<p>源题链接：<a href="https://leetcode-cn.com/problems/unique-paths-ii/">https://leetcode-cn.com/problems/unique-paths-ii/</a></p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePathsWithObstacles</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obstacleGrid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">elif</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">elif</span> obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> obstacleGrid<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>码力升级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建blog</title>
    <link href="/2022/02/19/hexo%E6%90%AD%E5%BB%BAblog/"/>
    <url>/2022/02/19/hexo%E6%90%AD%E5%BB%BAblog/</url>
    
    <content type="html"><![CDATA[<h1 id="基于Hexo搭建Blog"><a href="#基于Hexo搭建Blog" class="headerlink" title="基于Hexo搭建Blog"></a>基于Hexo搭建Blog</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install hexo-cli -ghexo init &lt;folder&gt;npm installhexo new blogname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><ul><li>将下载的主题存储在 themes 文件夹</li><li>在 _config.yml 文件中修改配置即可</li></ul>]]></content>
    
    
    <categories>
      
      <category>工具经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
