<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>科研绘图工具</title>
    <link href="/2022/03/01/%E7%A7%91%E7%A0%94%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/03/01/%E7%A7%91%E7%A0%94%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="Scienceplot-科研绘图工具"><a href="#Scienceplot-科研绘图工具" class="headerlink" title="Scienceplot 科研绘图工具"></a>Scienceplot 科研绘图工具</h1>]]></content>
    
    
    <categories>
      
      <category>实用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2022/03/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/03/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-设计模式"><a href="#Python-设计模式" class="headerlink" title="Python 设计模式"></a>Python 设计模式</h1><h2 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h2><ul><li>封装：将数据属性封装在类内</li><li>继承：类代码重用的一种方式</li><li>多态：继承的类具有多种形态，python 是多态语言 </li></ul><h2 id="接口规范模板"><a href="#接口规范模板" class="headerlink" title="接口规范模板"></a>接口规范模板</h2><p>接口：若干抽象方法的集合</p><ul><li>限制实现的接口的类必须安装规定的调用方式实现代码</li><li>对高层模块隐藏类的内部实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Payment</span>(metaclass=ABCMeta)<br><br><span class="hljs-meta">    @abstractmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Alipay</span>(<span class="hljs-title class_ inherited__">Payment</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;支付宝支付<span class="hljs-subst">&#123;money:<span class="hljs-number">4.2</span>f&#125;</span>元&quot;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">WechatPay</span>(<span class="hljs-title class_ inherited__">Payment</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pay</span>(<span class="hljs-params">self, money</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;微信支付<span class="hljs-subst">&#123;money:<span class="hljs-number">4.2</span>f&#125;</span>元&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="面向对象设计-SOLID-原则"><a href="#面向对象设计-SOLID-原则" class="headerlink" title="面向对象设计 SOLID 原则"></a>面向对象设计 SOLID 原则</h2><ul><li>开放封闭原则：软件实体应尽量在不改动原有代码的情况下扩展</li><li>里氏替换原则：所有引用父类的地方必须透明的使用子类的对象，即方法重写时必须保证接口一致</li><li>依赖倒置原则：高层模块不应该依赖底层模块，二者都应该依赖抽象类接口，针对接口编程</li><li>接口隔离原则：使用多个专门接口，而不使用单一的总接口</li><li>单一职责原则：不要存在多于一个导致类变更的原因，即使类变更的原因只能有一个</li></ul><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul><li>内容：不要向客户类暴露对象创建的细节，而是工厂类负责创建产品类的实例</li><li>优点：<ul><li>隐藏了对象创建的实现细节</li><li>客户类不需要修改代码</li></ul></li><li>缺点：<ul><li>违背了单一职责原则，将创建逻辑集中到了一个类中</li><li>添加新产品时，需要修改工厂类代码，违背了开闭原则</li></ul></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><br><span class="hljs-keyword">class</span> <span class="hljs-symbol">PaymentFactory:</span><br><span class="hljs-symbol">    <span class="hljs-symbol">def</span></span> <span class="hljs-symbol">create_payment</span>(<span class="hljs-symbol">self, <span class="hljs-symbol">method</span></span>):<br>        <span class="hljs-symbol">if</span> <span class="hljs-symbol">method</span> == &quot;<span class="hljs-symbol">alipay</span>&quot;:<br>            <span class="hljs-symbol">return</span> <span class="hljs-symbol">Alipay</span>()<br>        <span class="hljs-symbol">elif</span> <span class="hljs-symbol">method</span> == &quot;<span class="hljs-symbol">wechat</span>&quot;:<br>            <span class="hljs-symbol">return</span> <span class="hljs-symbol">WechatPay</span>()<br>        # <span class="hljs-symbol">elif</span> <span class="hljs-symbol">new</span> <span class="hljs-symbol">method</span>&quot;<br>        # <span class="hljs-symbol">new</span> <span class="hljs-symbol">class</span> <br>        <span class="hljs-symbol">else:</span><br><span class="hljs-symbol">            <span class="hljs-symbol">raise</span></span> <span class="hljs-symbol">TypeError</span>(<span class="hljs-symbol">f</span>&quot;<span class="hljs-symbol">No</span> <span class="hljs-symbol">such</span> <span class="hljs-symbol">payment</span> <span class="hljs-symbol">named</span> &#123;method&#125;<span class="hljs-string">&quot;)</span><br></code></pre></td></tr></table></figure><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><ul><li>内容：定义了创建对象的抽象接口（工厂接口）</li><li>优点：<ul><li>每个具体产品都对应一个具体工厂类，不需要修改工厂类代码</li><li>隐藏了对象创建的具体细节</li></ul></li><li>缺点：<ul><li>每增加一个具体产品类，就需要增加一个相应的具体工厂类</li></ul></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMeta, abstractmethod<br><br><span class="hljs-keyword">class</span> <span class="hljs-symbol">PaymentFactory</span>(<span class="hljs-symbol">metaclass</span>=<span class="hljs-symbol">ABCMeta</span>):<br>    @<span class="hljs-symbol">abstractmethod</span><br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">create_payment</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">pass</span><br><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">AlipayFactory</span>(<span class="hljs-symbol">PaymentFactory</span>):<br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">create_payment</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">return</span> <span class="hljs-symbol">Alipay</span>()<br><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">WechatFactory</span>(<span class="hljs-symbol">PaymentFactory</span>):<br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">create_payment</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">return</span> <span class="hljs-symbol">WechatPay</span>()<br></code></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>内容：定义了工厂类接口，使工厂子类创建一系列相关或者相互依赖的对象</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">from</span> abc <span class="hljs-keyword">import</span> ABCMata, abstractmethod<br><br># 抽象产品 <br><br><span class="hljs-keyword">class</span> <span class="hljs-symbol">PhoneShell</span>(<span class="hljs-symbol">metaclass</span>=<span class="hljs-symbol">ABCMeta</span>):<br>    @<span class="hljs-symbol">abstractmethod</span><br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">show_shell</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">pass</span><br><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">CPU</span>(<span class="hljs-symbol">metaclass</span>=<span class="hljs-symbol">ABCMeta</span>):<br>    @<span class="hljs-symbol">abstractmethod</span><br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">show_cpu</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">pass</span><br><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">OS</span>(<span class="hljs-symbol">metaclass</span>=<span class="hljs-symbol">ABCMeta</span>):<br>    @<span class="hljs-symbol">abstractmethod</span><br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">show_os</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">pass</span><br><br># 抽象工厂<br><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">PhoneFactory</span>(<span class="hljs-symbol">metaclass</span>=<span class="hljs-symbol">ABCMeta</span>):<br>    @<span class="hljs-symbol">abstractmethod</span>(<span class="hljs-symbol">self</span>):<br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">make_shell</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">pass</span><br>    <br>    @<span class="hljs-symbol">abstractmethod</span>(<span class="hljs-symbol">self</span>):<br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">make_cpu</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">pass</span><br><br>    @<span class="hljs-symbol">abstractmethod</span>(<span class="hljs-symbol">self</span>):<br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">make_os</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">pass</span><br><br># 具体产品<br><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">SmallShell</span>(<span class="hljs-symbol">PhoneShell</span>):<br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">show_shell</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">print</span>(&quot;<span class="hljs-symbol">small</span> <span class="hljs-symbol">shell</span>&quot;)<br><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">BigShell</span>(<span class="hljs-symbol">PhoneShell</span>):<br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">show_shell</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">print</span>(&quot;<span class="hljs-symbol">big</span> <span class="hljs-symbol">shell</span>&quot;)<br><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">A1</span>(<span class="hljs-symbol">CPU</span>):<br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">show_cpu</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">print</span>(&#x27;<span class="hljs-symbol">a1</span> <span class="hljs-symbol">cpu</span>&#x27;)<br><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">A2</span>(<span class="hljs-symbol">CPU</span>):<br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">show_cpu</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">print</span>(&#x27;<span class="hljs-symbol">a2</span> <span class="hljs-symbol">cpu</span>&#x27;)<br><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">IOS10</span>(<span class="hljs-symbol">OS</span>):<br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">show_os</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">print</span>(&#x27;<span class="hljs-symbol">ios10</span> <span class="hljs-symbol">os</span>&#x27;)<br><br><span class="hljs-symbol">class</span> <span class="hljs-symbol">IOS11</span>(<span class="hljs-symbol">OS</span>):<br>    <span class="hljs-symbol">def</span> <span class="hljs-symbol">show_os</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">print</span>(&#x27;<span class="hljs-symbol">ios11</span> <span class="hljs-symbol">os</span>&#x27;)<br>        <br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>码力升级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模型落地</title>
    <link href="/2022/02/22/%E6%A8%A1%E5%9E%8B%E8%90%BD%E5%9C%B0/"/>
    <url>/2022/02/22/%E6%A8%A1%E5%9E%8B%E8%90%BD%E5%9C%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Pytorch-模型落地"><a href="#Pytorch-模型落地" class="headerlink" title="Pytorch 模型落地"></a>Pytorch 模型落地</h1><h2 id="Tensorrt-模型构建方案"><a href="#Tensorrt-模型构建方案" class="headerlink" title="Tensorrt 模型构建方案"></a>Tensorrt 模型构建方案</h2><ul><li><a href="https://github.com/search?q=tensorrt">Tensorrt</a>: Nvidia 提供的 C++ 语言的深度学习模型推理方案，模型实现难度大。</li><li><a href="https://github.com/wang-xinyu/tensorrtx">TensorrtX</a>: 基于 tensorrt, 使用 C++ 硬代码实现了经典视觉模型，应用方便但扩展性极低。</li><li><a href="https://github.com/NVIDIA-AI-IOT/torch2trt">Torch2Trt</a>: Nvidia 公司 IOT 部门开源方案，提供 Python 端的操作实现方案，应用方便但无法跨硬件加速设备。</li><li><a href="https://github.com/shouxieai/tensorRT_Pro">TensorRt_Pro</a>: 基于 ONNX 路线，提供了 C++、Python 接口，但目前 ONNX 并无法支持 Pytorch 的全部操作。</li></ul><h2 id="ONNX-模型转换指导"><a href="#ONNX-模型转换指导" class="headerlink" title="ONNX 模型转换指导"></a>ONNX 模型转换指导</h2><ol><li>对于包含 shape、size 返回值的参数， 必须使用 int 进行规格化。</li><li>对于 Upsample, functional.interpolate 函数，使用 scale_factor 指定倍率而非使用 size 指定大小。</li><li>对于 reshape、view 等操作，-1 的指定设置在 batch 维度，其他维度计算得出。</li><li>使用 torch.onnx.export 函数时，dynamic_axes 参数指南指定 batch 维度。</li></ol><p>注: 这些做法的必要性在于简化过程复杂度去掉 gather, shape 等节点。</p>   <figure class="highlight haskell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> torch<br><span class="hljs-title">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Model</span>(<span class="hljs-title">nn</span>.<span class="hljs-type">Module</span>):</span><br><span class="hljs-class">    def __init__(<span class="hljs-title">self</span>, ):</span><br><span class="hljs-class"></span><br><span class="hljs-class">         self.conv = nn.<span class="hljs-type">Conv2d</span>(1, 1, 3, <span class="hljs-title">stride</span>=1, <span class="hljs-title">padding</span>=1, <span class="hljs-title">bias</span>=<span class="hljs-type">True</span>)</span><br><span class="hljs-class">     </span><br><span class="hljs-class">     def forward(<span class="hljs-title">self</span>, <span class="hljs-title">x</span>):</span><br><span class="hljs-class">         return x.view(-1, <span class="hljs-title">int</span>(<span class="hljs-title">x</span>.<span class="hljs-title">numel</span> // <span class="hljs-title">x</span>.<span class="hljs-title">size</span>(0)))</span><br><span class="hljs-class"></span><br><span class="hljs-class"> model = <span class="hljs-type">Model</span>().eval()</span><br></code></pre></td></tr></table></figure><h2 id="动态模型处理"><a href="#动态模型处理" class="headerlink" title="动态模型处理"></a>动态模型处理</h2><ul><li>动态 batch<br>源自 TensorRT 编译时将 batch 固化，耗时固定，因此需要采用导出 batch。<ul><li>onnx 导出模型时，view 操作不能固定 batch 维度数值，改写成 -1</li><li>onnx 导出模型时，通常可以指定 dynamic_axes, 实际不指定也没有关系</li></ul></li><li>动态宽高<br>同上，源自模型编译时会将宽高固化，若后续宽高变化，则会影响使用，因此需要动态宽高的存在。<ul><li>使用 TRT::compile 函数的 inputsDimsSetup 参数定义输入的 shape</li><li>使用 TRT::set_layer_hook_reshape 钩子动态修改 reshape 的参数实现</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>模型部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tensorrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 日志处理</title>
    <link href="/2022/02/20/loguru%E5%BA%93/"/>
    <url>/2022/02/20/loguru%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-日志处理-Loguru-库"><a href="#Python-日志处理-Loguru-库" class="headerlink" title="Python 日志处理: Loguru 库"></a>Python 日志处理: Loguru 库</h1><h2 id="日志写入"><a href="#日志写入" class="headerlink" title="日志写入"></a>日志写入</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger<br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> <span class="hljs-type">Path</span><br><br>logger_formate = &quot;&#123;time&#125; - &#123;level&#125; - &#123;file&#125; - &#123;line&#125; - &#123;message&#125;&quot;<br>logger.<span class="hljs-keyword">add</span>(Path(&quot;logpath.log&quot;), formate = logger_formate)<br><br>logger.<span class="hljs-keyword">debug</span>(&quot;debug message&quot;)<br>logger.<span class="hljs-keyword">info</span>(&quot;info level message&quot;)<br>logger.<span class="hljs-built_in">warning</span>(&quot;warning level message&quot;)<br>logger.critical(&quot;critical level message&quot;)<br></code></pre></td></tr></table></figure><h2 id="分类处理"><a href="#分类处理" class="headerlink" title="分类处理"></a>分类处理</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> loguru <span class="hljs-keyword">import</span> logger<br><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> <span class="hljs-type">Path</span><br><br>log_dir = Path(&quot;./&quot;)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> log_dir.<span class="hljs-keyword">exists</span>():<br>    log_dir.mkdir(<span class="hljs-keyword">True</span>)<br>    <br>log_format = &quot;&#123;time:YYYY-MM-DD HH:mm:ss&#125; - &#123;level:8&#125;- &#123;file:10&#125; - &#123;line:5&#125; - &#123;message&#125;&quot;<br>logger.<span class="hljs-keyword">add</span>(<span class="hljs-type">Path</span>.joinpath(log_dir, Path(&quot;&#123;time:YYYY-MM-DD&#125;.log&quot;)), <span class="hljs-keyword">format</span> = log_format, rotation=&quot;3 day&quot;)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown规范</title>
    <link href="/2022/02/20/markdown%E8%A7%84%E8%8C%83/"/>
    <url>/2022/02/20/markdown%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-编写规范"><a href="#Markdown-编写规范" class="headerlink" title="Markdown 编写规范"></a>Markdown 编写规范</h1><p>采用 GFM, 以及百度 fex-team 团队规范格式编写所有 markdown 文件。</p><h2 id="文件规范"><a href="#文件规范" class="headerlink" title="文件规范"></a>文件规范</h2><ul><li>文件后缀必须使用 .md</li><li>文件名必须使用小写</li><li>文件编码必须使用 UTF-8</li><li>文件标题书写采用如下规范, 使用 26个 = 号隔开</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs abnf">Markdown 规范<br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><h2 id="章节规范"><a href="#章节规范" class="headerlink" title="章节规范"></a>章节规范</h2><ul><li>章节标题必须以 ## 开始</li><li>章节标题与内容之间必须包含一个空行</li></ul><h2 id="表格规范"><a href="#表格规范" class="headerlink" title="表格规范"></a>表格规范</h2><ul><li>使用 - 和 | 符号创建表格, 表格与内容之间插入空行</li></ul><table><thead><tr><th>第一行</th><th>第二行</th></tr></thead><tbody><tr><td>内容1</td><td>内容2</td></tr><tr><td>内容3</td><td>内容4</td></tr></tbody></table><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">第一行 <span class="hljs-string">| 第二行 </span><br>----- <span class="hljs-string">| ----- </span><br>内容<span class="hljs-number">1</span> <span class="hljs-string">| 内容2 </span><br>内容<span class="hljs-number">3</span> <span class="hljs-string">| 内容4 </span><br></code></pre></td></tr></table></figure><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ul><li>代码块插入使用连续两个 ``` </li><li>代码块中插入 ``` 代码时使用 ````代替</li><li>代码块与文本之间插入空行</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">``</span><span class="hljs-string">`</span><br><span class="hljs-string">## 演示使用</span><br><span class="hljs-string">`</span><span class="hljs-string">``</span><br></code></pre></td></tr></table></figure><h2 id="正文规范"><a href="#正文规范" class="headerlink" title="正文规范"></a>正文规范</h2><ul><li>英文和数字使用半角字符</li><li>中文文字之间不使用空格</li><li>中文文字与英文、阿拉伯数字及 @ $ % ^ &amp; * . () 之间使用空格</li><li>中文标点之间不加空格</li><li>中文标点与前后字符之间均不加空格</li><li>若括号内有中文，使用中文括号</li><li>若括号内全部为英文，则使用半角英文符号</li><li>使用直角引号 (「」) 代替双引号</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://gfm.docschina.org/zh-hans/">GFM</a> : Github建议使用的markdown文件书写规范</p>]]></content>
    
    
    <categories>
      
      <category>书写规范</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 不同路径 II</title>
    <link href="/2022/02/19/leetcode63/"/>
    <url>/2022/02/19/leetcode63/</url>
    
    <content type="html"><![CDATA[<p>源题链接：<a href="https://leetcode-cn.com/problems/unique-paths-ii/">https://leetcode-cn.com/problems/unique-paths-ii/</a></p><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">class</span> Solution:<br>    <span class="hljs-attribute">def</span> uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -&gt; int:<br>        <span class="hljs-attribute">m</span> = len(obstacleGrid)<br>        <span class="hljs-attribute">n</span> = len(obstacleGrid[<span class="hljs-number">0</span>])<br>        <br>        <span class="hljs-attribute">if</span> obstacleGrid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>:<br>            <span class="hljs-attribute">obstacleGrid</span>[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br>        <span class="hljs-attribute">else</span>:<br>            <span class="hljs-attribute">obstacleGrid</span>[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span><br>        <span class="hljs-attribute">for</span> i in range(<span class="hljs-number">1</span>, m):<br>            <span class="hljs-attribute">if</span> obstacleGrid[i][<span class="hljs-number">0</span>] == <span class="hljs-number">1</span>:<br>                <span class="hljs-attribute">obstacleGrid</span>[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>            <span class="hljs-attribute">elif</span> obstacleGrid[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>:<br>                <span class="hljs-attribute">obstacleGrid</span>[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>            <span class="hljs-attribute">else</span>:<br>                <span class="hljs-attribute">obstacleGrid</span>[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>        <span class="hljs-attribute">for</span> j in range(<span class="hljs-number">1</span>, n):<br>            <span class="hljs-attribute">if</span> obstacleGrid[<span class="hljs-number">0</span>][j] ==<span class="hljs-number">1</span>:<br>                <span class="hljs-attribute">obstacleGrid</span>[<span class="hljs-number">0</span>][j] = <span class="hljs-number">0</span><br>            <span class="hljs-attribute">elif</span> obstacleGrid[<span class="hljs-number">0</span>][j-<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>:<br>                <span class="hljs-attribute">obstacleGrid</span>[<span class="hljs-number">0</span>][j] = <span class="hljs-number">0</span><br>            <span class="hljs-attribute">else</span>:<br>                <span class="hljs-attribute">obstacleGrid</span>[<span class="hljs-number">0</span>][j] = <span class="hljs-number">1</span><br>        <span class="hljs-attribute">for</span> i in range(<span class="hljs-number">1</span>, m):<br>            <span class="hljs-attribute">for</span> j in range(<span class="hljs-number">1</span>, n):<br>                <span class="hljs-attribute">if</span> obstacleGrid[i][j] == <span class="hljs-number">1</span>:<br>                    <span class="hljs-attribute">obstacleGrid</span>[i][j] = <span class="hljs-number">0</span><br>                <span class="hljs-attribute">else</span>:<br>                    <span class="hljs-attribute">obstacleGrid</span>[i][j] = obstacleGrid[i-<span class="hljs-number">1</span>][j] + obstacleGrid[i][j-<span class="hljs-number">1</span>]<br>        <span class="hljs-attribute">return</span> obstacleGrid[-<span class="hljs-number">1</span>][-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>码力升级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建blog</title>
    <link href="/2022/02/19/hexo%E6%90%AD%E5%BB%BAblog/"/>
    <url>/2022/02/19/hexo%E6%90%AD%E5%BB%BAblog/</url>
    
    <content type="html"><![CDATA[<h1 id="基于Hexo搭建Blog"><a href="#基于Hexo搭建Blog" class="headerlink" title="基于Hexo搭建Blog"></a>基于Hexo搭建Blog</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install hexo-cli -g<br>hexo init &lt;folder&gt;<br><span class="hljs-built_in">npm</span> install<br>hexo <span class="hljs-keyword">new</span> blogname<br></code></pre></td></tr></table></figure><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><ul><li>将下载的主题存储在 themes 文件夹</li><li>在 _config.yml 文件中修改配置即可</li></ul>]]></content>
    
    
    <categories>
      
      <category>工具经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
