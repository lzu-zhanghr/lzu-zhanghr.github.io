<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>redis-ai</title>
    <link href="/2022/03/22/redis-ai/"/>
    <url>/2022/03/22/redis-ai/</url>
    
    <content type="html"><![CDATA[<p>redis-model: <a href="https://redisai-py.readthedocs.io/en/latest/api.html#client-class">https://redisai-py.readthedocs.io/en/latest/api.html#client-class</a><br>mogondb-data: <a href="https://gist.github.com/erogol/f76ffc9ad4bc61263ec41fa7e96b3ae2">https://gist.github.com/erogol/f76ffc9ad4bc61263ec41fa7e96b3ae2</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库基础</title>
    <link href="/2022/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="常见数据模型"><a href="#常见数据模型" class="headerlink" title="常见数据模型"></a>常见数据模型</h2><ul><li>层次模型：有且只有一个节点无双亲节点（树）</li><li>网状模型：一个节点可以有多于一个的双亲节点（图）</li><li>关系模型：二维表表示实体及实体关系间联系（表格）<ul><li>关系：一个关系对应一张二维表，二维表名就是关系名</li><li>元组：表中的一行称为一个元祖，也称为记录</li><li>属性：表中的一列称为一个属性，也称为字段。列的值称为属性值，取值范围称为域</li><li>分量：每一条记录对应的一个属性，称为字段</li><li>关系模式：对关系（表）的描述（各个属性名）称为关系模式</li><li>主键（码）：一个关系（表）中指定的用以唯一标识各个元组的属性</li><li>候选键（码）：在一个关系（表）中可以唯一标识各个元组的属性（不一定是一个属性）</li><li>（非）主属性：可以作为候选键（唯一标识一个元组）的属性称为主属性</li><li>优点：数据结构单一，关系规范化，概念简单</li><li>缺点：查询效率低</li></ul></li><li>面向对象模型：没有准确的定义，适合处理丰富的数据类型，提高了数据访问性能</li></ul><h2 id="关系数据库的规范化"><a href="#关系数据库的规范化" class="headerlink" title="关系数据库的规范化"></a>关系数据库的规范化</h2><p>  范式：某个级别关系模式的集合<br>  第一范式：关系模式设计中最基本的要求，要求关系模式中<strong>所有的属性不可分解</strong><br>  第二范式：满足第一范式的基础上，并且该关系模式中所有的非主属性完全依赖于主键（完全对应），若不依赖，需要拆分建表<br>  第三范式：满足第二范式的基础上，要求关系模式中的每个非主属性都不直接、间接依赖于主键</p><h2 id="数据表关系"><a href="#数据表关系" class="headerlink" title="数据表关系"></a>数据表关系</h2><ul><li>单表：一张表就可以保存所有信息</li><li>一对多：需要两张表存储信息，且两张表存在一对多，多对一关系。</li><li>多对多：需要三张表存储信息，两张单表+关系表，创造出两个单表之间的多对多关系。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>locust库</title>
    <link href="/2022/03/13/locust%E5%BA%93/"/>
    <url>/2022/03/13/locust%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-压力测试-Locust-库"><a href="#Python-压力测试-Locust-库" class="headerlink" title="Python 压力测试: Locust 库"></a>Python 压力测试: Locust 库</h1>]]></content>
    
    
    <categories>
      
      <category>实用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql</title>
    <link href="/2022/03/10/mysql/"/>
    <url>/2022/03/10/mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql-数据库"><a href="#Mysql-数据库" class="headerlink" title="Mysql 数据库"></a>Mysql 数据库</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><table><thead><tr><th align="center">类型</th><th align="center">字节数</th><th align="center">范围（有符号）</th><th align="center">范围（无符号）</th><th align="center">场景</th></tr></thead><tbody><tr><td align="center">(unsigned) tinyint</td><td align="center">1</td><td align="center">(-128, 127)</td><td align="center">(0, 256)</td><td align="center">小整数值</td></tr><tr><td align="center">(unsigned) int</td><td align="center">4</td><td align="center">(-2147483648, 2147483647)</td><td align="center">(0, 4294967295)</td><td align="center">大整数值</td></tr><tr><td align="center">(unsigned) float</td><td align="center">4</td><td align="center">(-3.402823466E+38, 1.175494351E-38)</td><td align="center">(1.175494351E-38, 3.402823466E+38)</td><td align="center">单精度浮点数</td></tr><tr><td align="center">(unsigned) double</td><td align="center">8</td><td align="center">(-1.7976931348623157E+308, 2.2250738585072014E-308)</td><td align="center">(2.2250738585072014E-308, 1.7976931348623157E+308)</td><td align="center">双精度浮点数</td></tr><tr><td align="center">(unsigned) decimal</td><td align="center">8</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h4><table><thead><tr><th align="center">类型</th><th align="center">字节数</th><th align="center">范围</th><th align="center">格式</th><th align="center">零值</th></tr></thead><tbody><tr><td align="center">date</td><td align="center">4</td><td align="center">(1000-01-01, 9999-12-31)</td><td align="center">YYYY-MM-DD</td><td align="center">0000-00-00</td></tr><tr><td align="center">time</td><td align="center">3</td><td align="center">(-838:59:59, 838:59:59)</td><td align="center">HH:MM:SS</td><td align="center">00:00:00</td></tr><tr><td align="center">year</td><td align="center">1</td><td align="center">(1901, 2155)</td><td align="center">YYYY</td><td align="center">0000</td></tr><tr><td align="center">datetime</td><td align="center">8</td><td align="center">(1000-01-01 00:00:00, 9999-12-31 23:59:59)</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">0000-00-00 00:00:00</td></tr><tr><td align="center">timestamp</td><td align="center">4</td><td align="center">(1970-01-01 00:00:00, 2038-01-19 23:59:59)</td><td align="center">YYYY-MM-DD HH:MM:SS</td><td align="center">0000-00-00 00:00:00</td></tr></tbody></table><h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><table><thead><tr><th align="center">类型</th><th align="center">长度</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">255</td></tr><tr><td align="center">varcahr</td><td align="center">65535</td></tr><tr><td align="center">text</td><td align="center">(2**16 - 1)</td></tr></tbody></table><h2 id="SQL-基本命令"><a href="#SQL-基本命令" class="headerlink" title="SQL 基本命令"></a>SQL 基本命令</h2><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> databse name<span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token comment">-- 修改数据库编码方式</span><span class="token keyword">alter</span> databse name <span class="token keyword">default</span> <span class="token keyword">charset</span> <span class="token keyword">set</span> utf8 <span class="token keyword">collate</span> utf8_general_ci<span class="token punctuation">;</span><span class="token keyword">drop</span> databse name<span class="token punctuation">;</span><span class="token keyword">use</span> name<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> teacher<span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token comment"># 不允许为空</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token comment"># 默认为空</span>    email <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    salary <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 整数10位，小数4位</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">describe</span> teacher<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> tablename<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> teacher<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'song'</span><span class="token punctuation">,</span> <span class="token string">'09@163.com'</span><span class="token punctuation">,</span> <span class="token string">'123.5'</span><span class="token punctuation">)</span><span class="token comment">-- 修改表属性</span><span class="token comment">-- 1. 添加列</span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">add</span> column_name column_type <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment">-- 2. 删除列</span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">drop</span> <span class="token keyword">column</span> column_name<span class="token punctuation">;</span><span class="token comment">-- 3. 修改列名和类型</span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name change old_column_name new_column_name new_column_type<span class="token punctuation">;</span><span class="token comment">-- 4. 修改列类型</span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">modify</span> <span class="token keyword">column</span> column_name column_type<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 新增</span><span class="token keyword">insert</span> <span class="token keyword">into</span> table_name <span class="token punctuation">(</span>column_name1<span class="token punctuation">,</span> column_name2<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>column_data1<span class="token punctuation">,</span> column_data2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 删除</span><span class="token keyword">delete</span> <span class="token keyword">from</span> table_name <span class="token keyword">where</span> column_name<span class="token operator">=</span>column_data<span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> table_name <span class="token keyword">where</span> column_name<span class="token operator">></span>column_data<span class="token punctuation">;</span><span class="token comment">-- 修改</span><span class="token keyword">update</span> table_name <span class="token keyword">set</span> column_name<span class="token operator">=</span>new_column_data<span class="token punctuation">;</span><span class="token keyword">update</span> table_name <span class="token keyword">set</span> column_name<span class="token operator">=</span>new_clolumn_data <span class="token keyword">where</span> column_name <span class="token operator">></span> old_column_data<span class="token punctuation">;</span><span class="token comment">-- 查询</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name<span class="token punctuation">;</span> <span class="token comment">-- 查询整个表</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_name <span class="token keyword">where</span> key_column_name<span class="token operator">=</span>key_column_data<span class="token punctuation">;</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> table_name <span class="token keyword">where</span> key_column_name<span class="token operator">=</span>key_column_data<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Python-操作数据库"><a href="#Python-操作数据库" class="headerlink" title="Python 操作数据库"></a>Python 操作数据库</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment"># 连接</span>conn <span class="token operator">=</span> aiomysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 查看</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"show databases"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># 创建</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"create database db"</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 删除</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"drop database db"</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 查看表</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"use db"</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"show tables"</span><span class="token punctuation">)</span>result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">## 创建表</span>cuesor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"use db"</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""create table teacher(    id int(5) primary key not null, # 不允许为空    name varchar(10) null, # 默认为空    email varchar(30),    salary decimal(10, 4) # 整数10位，小数4位)default charset=utf8;"""</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="ORM-操作数据库"><a href="#ORM-操作数据库" class="headerlink" title="ORM 操作数据库"></a>ORM 操作数据库</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemyapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_DATABASE_URI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'数据库类型://数据库登录名:数据库登录密码@数据库的地址:数据库的端口/数据库的名字'</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_ECHO'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Role</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">"roles"</span>        <span class="token builtin">id</span> <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>INTEGER<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>      <span class="token comment"># insert </span>admin <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"admin@example.com"</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>admin<span class="token punctuation">)</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># delete</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>admin<span class="token punctuation">)</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># query</span>admin <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>admin<span class="token punctuation">.</span>email<span class="token comment"># update</span>User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>admin<span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string">'new email'</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqluser <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token punctuation">)</span>pwd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"password:"</span><span class="token punctuation">)</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">"dbname"</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select * from users where name=%s and password=%s"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> pwd<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 包含拼接操作的字符串必须放入 execute 其中才能避免 sql注入</span>result <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="账户操作相关"><a href="#账户操作相关" class="headerlink" title="账户操作相关"></a>账户操作相关</h2><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 账户操作</span><span class="token keyword">create</span> <span class="token keyword">user</span> name<span class="token variable">@ip</span> identified <span class="token keyword">by</span> pwd<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">user</span> name<span class="token variable">@ip</span><span class="token keyword">rename</span> <span class="token keyword">user</span> name<span class="token variable">@ip</span> <span class="token keyword">to</span> name<span class="token variable">@ip</span><span class="token keyword">set</span> password <span class="token keyword">for</span> name<span class="token variable">@ip</span> <span class="token operator">=</span> Password<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 权限管理</span><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> database_name<span class="token punctuation">.</span>table_name <span class="token keyword">to</span> name<span class="token variable">@ip</span> <span class="token comment">-- 所有权限</span><span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token punctuation">,</span> <span class="token keyword">insert</span> <span class="token keyword">on</span> database_name<span class="token punctuation">.</span>table_name <span class="token keyword">to</span> name<span class="token variable">@ip</span> <span class="token comment">-- 查询，插入权限</span><span class="token keyword">revoke</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> database_name<span class="token punctuation">.</span>table_name <span class="token keyword">to</span> name<span class="token variable">@ip</span> <span class="token comment">-- 移除所有权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="必备-SQL-指令"><a href="#必备-SQL-指令" class="headerlink" title="必备 SQL 指令"></a>必备 SQL 指令</h2><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> database_name<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> depart<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    titlr <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> info<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    email <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span><span class="token punctuation">,</span>    depart_id <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- 条件查询</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> age <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> age <span class="token operator">!=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> age <span class="token operator">between</span> <span class="token number">2</span> <span class="token operator">and</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">"ccc"</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">"ccc"</span> <span class="token operator">or</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 子查询</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> depart<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> depart <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> depart <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> id <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">as</span> T <span class="token keyword">where</span> T<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">-- 通配符</span><span class="token comment">-- % 占位 n 个字符, _ 占位一个 字符</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">"%沛%"</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> email <span class="token operator">like</span> <span class="token string">"__peiqi@live.com"</span><span class="token punctuation">;</span><span class="token comment">-- 映射, 效率很低</span><span class="token keyword">select</span>     id<span class="token punctuation">,</span>    name<span class="token punctuation">,</span>    <span class="token punctuation">(</span> <span class="token keyword">select</span> title <span class="token keyword">from</span> depart <span class="token keyword">where</span> depart<span class="token punctuation">.</span>id <span class="token operator">=</span> info<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">as</span> x<span class="token punctuation">,</span>    <span class="token comment">-- ( select title from depart where depart.id = info.depart_id) as x,</span><span class="token keyword">from</span> info<span class="token punctuation">;</span><span class="token comment">-- 排序</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">asc</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">asc</span><span class="token punctuation">,</span> id <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment">-- 部分数据操作</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">limit</span> <span class="token keyword">offset</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">-- offset 设置开始取的位置</span><span class="token comment">-- 分组</span><span class="token keyword">select</span> age<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">from</span> info <span class="token keyword">group</span> <span class="token keyword">by</span> age<span class="token punctuation">;</span><span class="token keyword">select</span> depart_id<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> info <span class="token keyword">group</span> <span class="token keyword">by</span> depart_id<span class="token punctuation">;</span><span class="token keyword">select</span> depart_id<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">from</span> info <span class="token keyword">group</span> <span class="token keyword">by</span> depart_id <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">-- 这里分组之后不能用 where， 用having</span><span class="token comment">-- 左右连接</span><span class="token comment">-- 多表联合查询</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> depart <span class="token keyword">on</span> info<span class="token punctuation">.</span>depart_id <span class="token operator">=</span> depart<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 主表，从表的确定:要展示谁的数据就以谁为主表，一般最好用左外连接</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">left</span> <span class="token keyword">join</span> depart <span class="token keyword">on</span> info<span class="token punctuation">.</span>depart_id <span class="token operator">=</span> depart<span class="token punctuation">.</span>id <span class="token comment">-- 简写</span><span class="token comment">-- 内连接：会忽略两张表没有联系的属性</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">inner</span> <span class="token keyword">join</span> depart <span class="token keyword">on</span> info<span class="token punctuation">.</span>depart_id <span class="token operator">=</span> depart<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 联合 union: 列数量相同就可以连接</span><span class="token keyword">select</span> id<span class="token punctuation">,</span> title <span class="token keyword">from</span> depart <span class="token keyword">union</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span> name <span class="token keyword">from</span> info<span class="token punctuation">;</span> <span class="token comment">-- 会自动去重</span><span class="token keyword">select</span> id<span class="token punctuation">,</span> title <span class="token keyword">from</span> depart <span class="token keyword">union</span> <span class="token keyword">all</span><span class="token keyword">select</span> id<span class="token punctuation">,</span> name <span class="token keyword">from</span> info<span class="token punctuation">;</span> <span class="token comment">-- 不会自动去重</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h4><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 外键约束：保证一个列的值必须是其他表中特定列已经存在的值。</span><span class="token comment">-- 创建时约束：</span><span class="token keyword">create</span> <span class="token keyword">table</span> depart<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    title <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> info<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    email <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span><span class="token punctuation">,</span>    depart_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> fk_info_depart <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>depart_id<span class="token punctuation">)</span> <span class="token keyword">references</span> depart<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- 创建后添加：</span><span class="token keyword">alter</span> <span class="token keyword">table</span> info <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_into_depart <span class="token keyword">foreign</span> <span class="token keyword">key</span> info<span class="token punctuation">(</span>depart_id<span class="token punctuation">)</span> <span class="token keyword">references</span> depart<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 删除外键</span><span class="token keyword">alter</span> <span class="token keyword">table</span> info <span class="token keyword">drop</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> fk_info_depart<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="数据库索引"><a href="#数据库索引" class="headerlink" title="数据库索引"></a>数据库索引</h4><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建索引，加速查找，加入索引之后，数据基于 B+Tree 数据结构存储，加速了查询，减慢了增加删除改动操作速度。</span><span class="token comment">-- 非聚簇索引(mysiam 引擎)</span><span class="token keyword">create</span> <span class="token keyword">table</span> name<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span>mysiam <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- 聚簇索引(innodb 引擎)</span><span class="token keyword">create</span> <span class="token keyword">table</span> name<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span> <span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span> <span class="token comment">-- 默认引擎</span><span class="token comment">-- 实际使用</span><span class="token keyword">create</span> <span class="token keyword">table</span> name<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> <span class="token comment">--主键索引</span>    <span class="token keyword">unique</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token comment">--唯一索引</span>    <span class="token keyword">index</span> age <span class="token keyword">int</span> <span class="token comment">--普通索引</span><span class="token punctuation">)</span><span class="token keyword">default</span> <span class="token keyword">charset</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token comment">-- 命中索引注意事项，</span>    <span class="token comment">-- 1.字符类型保持一致</span>    <span class="token comment">-- 2.不能使用不等于运算符</span>    <span class="token comment">-- 3.like 通配符不能命中</span><span class="token comment">-- 判断是否命中索引</span><span class="token comment">-- explain + sql 语句</span><span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> big <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="Mysql-视图"><a href="#Mysql-视图" class="headerlink" title="Mysql 视图"></a>Mysql 视图</h4><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> v1 <span class="token keyword">as</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span>name <span class="token keyword">from</span> d1 <span class="token keyword">where</span> id <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h4 id="Mysql-触发器"><a href="#Mysql-触发器" class="headerlink" title="Mysql 触发器"></a>Mysql 触发器</h4><div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 对数据库中某个表操作的前后希望触发某个特定的行为，可以使用触发器</span><span class="token comment">-- 执行前</span><span class="token keyword">delimiter</span> $$<span class="token keyword">create</span> <span class="token keyword">trigger</span> tri_after_insert_tb1 before <span class="token keyword">insert</span> <span class="token keyword">on</span> tb1 <span class="token keyword">for each row</span><span class="token keyword">begin</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">end</span> $$<span class="token keyword">delimiter</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><ul><li>原子性，一致性，隔离性，持久性四大特性</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqlconn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>begin<span class="token punctuation">(</span><span class="token punctuation">)</span>cuesor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"use db"</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""create table teacher(    id int(5) primary key not null, # 不允许为空    name varchar(10) null, # 默认为空    email varchar(30),    salary decimal(10, 4) # 整数10位，小数4位)default charset=utf8;"""</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="安全锁"><a href="#安全锁" class="headerlink" title="安全锁"></a>安全锁</h4><ul><li>update,insert,delete 内部会加锁，select 不会加锁<div class="code-wrapper"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- select需要加锁的时候</span><span class="token comment">-- 排他锁</span><span class="token keyword">begin</span><span class="token punctuation">;</span>     <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span> name<span class="token operator">=</span>key_name <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment">-- 共享锁:允许加锁之后查询，但不允许修改</span><span class="token keyword">begin</span><span class="token punctuation">;</span>     <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tablename <span class="token keyword">where</span> name<span class="token operator">=</span>key_name <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul><h4 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h4><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">!pip install dbutils<span class="token keyword">import</span> threading<span class="token keyword">import</span> pymysql<span class="token keyword">from</span> dbutils<span class="token punctuation">.</span>pooled_db <span class="token keyword">import</span> PooledDBmysql_db_pool <span class="token operator">=</span> PooledDB<span class="token punctuation">(</span>    creator<span class="token operator">=</span>pymysql<span class="token punctuation">,</span>    maxconnections<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span>    mincached<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>    maxcached<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>    blocking<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    setsession<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    ping<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>    host<span class="token operator">=</span>ip<span class="token punctuation">,</span>    port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>    user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>    password<span class="token operator">=</span>pwd<span class="token punctuation">,</span>    database<span class="token operator">=</span>base_name<span class="token punctuation">,</span>    charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    conn<span class="token punctuation">.</span>mysql_db_pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>    cursor<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span>pymysql<span class="token punctuation">.</span>cursors<span class="token punctuation">.</span>DictCusor<span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select sleep(2)"</span><span class="token punctuation">)</span>    result<span class="token operator">=</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>异常处理</title>
    <link href="/2022/03/08/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/2022/03/08/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="try-except-else"><a href="#try-except-else" class="headerlink" title="try, except, else"></a>try, except, else</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"test_file"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"test error case"</span><span class="token punctuation">)</span><span class="token keyword">except</span> IOError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"file not found"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"successfully write file"</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="try-finally"><a href="#try-finally" class="headerlink" title="try, finally"></a>try, finally</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"test_file"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"test error case"</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> IOError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"file not found"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="自定义异常与抛出"><a href="#自定义异常与抛出" class="headerlink" title="自定义异常与抛出"></a>自定义异常与抛出</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> Exception<span class="token keyword">class</span> <span class="token class-name">GenderException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>args <span class="token operator">=</span> arggender <span class="token operator">=</span><span class="token string">"male-female"</span><span class="token keyword">if</span> gender <span class="token operator">!=</span> <span class="token string">"male"</span> <span class="token keyword">and</span> gender <span class="token operator">!=</span><span class="token string">"female"</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> GenderException<span class="token punctuation">(</span><span class="token string">"only male and female"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> my_module <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token comment"># 默认会导入全部，但有时候需要进行权限管理</span>__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"module1"</span><span class="token punctuation">,</span> <span class="token string">"module2"</span><span class="token punctuation">]</span> <span class="token comment"># 重新进行导入时，只会导入 module1, module2</span><span class="token keyword">from</span> <span class="token punctuation">.</span>moudle <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token comment"># 从当前包中的 module 模块导入全部</span><span class="token comment"># 自定义模块，切换项目之后无法找到模块文件，解决方法</span><span class="token comment"># 1.将模块所在路径加入解释器路径中，不建议使用</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> my_package<span class="token punctuation">.</span>my_module <span class="token keyword">as</span> module<span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> sys    sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">".path/to/my_package"</span><span class="token punctuation">)</span>    <span class="token keyword">import</span> my_package<span class="token punctuation">.</span>my_module <span class="token keyword">as</span> module<span class="token comment"># 2.将自定义模块，发布到系统目录</span>    <span class="token comment"># 1) 确定发布的模块的目录结构</span>    <span class="token comment"># 2) setup 编辑工作</span>    <span class="token comment"># 3) 构建模块</span>    <span class="token comment"># 4) 发布模块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>内存管理</title>
    <link href="/2022/03/08/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/2022/03/08/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>并发编程</title>
    <link href="/2022/03/07/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/03/07/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-并行编程"><a href="#Python-并行编程" class="headerlink" title="Python 并行编程"></a>Python 并行编程</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li>线程: 计算机中可以被 cpu 调度的最小单元（真正工作单元），适合 IO 密集型操作</li><li>进程: 计算机资源分配的最小单元（进程为线程提供资源），适合计算密集型操作</li><li>GIL 锁: 为了安全，让一个进程同一时刻只能有一个线程可以被 CPU 调用</li></ul><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> requests<span class="token keyword">import</span> threadingurl_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token string">"file_name1"</span><span class="token punctuation">:</span> <span class="token string">"web resrouce url1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">"file_name2"</span><span class="token punctuation">:</span> <span class="token string">"web resrouce url2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threadingloop <span class="token operator">=</span> <span class="token number">2000000</span>number <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">_add</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> number    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">_sub</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> number    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">-=</span> <span class="token number">1</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>_add<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>_sub<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 待所有子线程运行完之后，主线程才结束</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 待所有子线程运行完之后，主线程才结束</span><span class="token comment"># 上述实现了串行执行</span><span class="token comment"># 守护线程: 设置一个线程为守护线程，就表示这个线程是不重要的，在进程退出的时候，不用等待这个线程退出</span><span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>t<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 设置为守护线程，主线程执行完毕之后，进程就结束了，子线程也将被迫关闭</span><span class="token comment"># 设置为非守护线程，主线程执行完毕之后，需要等待子线程执行完毕，而后结束进程</span><span class="token comment"># 线程安全: 线程锁的实现</span>lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>RLock<span class="token punctuation">(</span><span class="token punctuation">)</span>loop <span class="token operator">=</span> <span class="token number">2000000</span>number <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">_add</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> lock<span class="token punctuation">:</span>        <span class="token keyword">global</span> number        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>            num <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">_sub</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> lock<span class="token punctuation">:</span>        <span class="token keyword">global</span> number        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>            num <span class="token operator">-=</span> <span class="token number">1</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>_add<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>_sub<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 全局变量对所有进程是共享的，会导致安全问题，加入线程锁之后，就不用担心线程安全问题，因为线程无法并行访问 number</span><span class="token comment"># Lock 不支持锁的嵌套，会导致死锁的产生</span><span class="token comment"># RLock 支持锁的嵌套</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> rnage<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"I'm </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>name<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string"> @</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">:</span><span class="token format-spec"> d</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>Python 线程安全操作: 必须关注开发文档</li></ul><h2 id="GIL-锁"><a href="#GIL-锁" class="headerlink" title="GIL 锁"></a>GIL 锁</h2><h5 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h5><ul><li><p>Python 解释器保证数据安全，避免垃圾回收线程和工作线程同时运行，创建了 GIL 锁，只允许一个进程只能串行执行其中的线程，当今多核 CPU 无法很好的利用 </p></li><li><p>GIL 锁和自定义锁为什么要同时存在？<br>  锁的目的是保护共享的数据，保护不同的数据需要不同的锁；GIL 和 自定义锁是两把锁，GIL 负责保护解释器级别的数据，而自定义锁负责保护自己开发的应用程序的数据</p></li></ul><h5 id="并发方案选择"><a href="#并发方案选择" class="headerlink" title="并发方案选择"></a>并发方案选择</h5><ul><li>单核 CPU<ul><li>I/O 密集型：多线程优于多进程</li><li>计算密集型：多线程优于多进程</li></ul></li><li>多核 CPU<ul><li>I/O 密集型：多线程优于多进程</li><li>计算密集型：多进程优于多线程</li></ul></li></ul><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><ul><li>相较于互斥锁 (mutex), 信号量 (Semaphore) 可以控制多个资源<div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Semaphore<span class="token punctuation">,</span> Thread<span class="token punctuation">,</span> currentThread<span class="token keyword">import</span> time<span class="token punctuation">,</span> randomsm <span class="token operator">=</span> Semaphore<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> sm<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string"> is running"</span></span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul><h2 id="event"><a href="#event" class="headerlink" title="event"></a>event</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token punctuation">,</span> Event<span class="token keyword">import</span> timeevent <span class="token operator">=</span> Event<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">coon</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> event<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">try too many times"</span></span><span class="token punctuation">)</span>            <span class="token keyword">return</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"try </span><span class="token interpolation"><span class="token punctuation">&#123;</span>currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    event<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    n <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string"> is connected"</span></span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>currentThread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string"> is checking"</span></span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    event<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> hread<span class="token punctuation">(</span>target<span class="token operator">=</span>conn<span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>check<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="并发-socket"><a href="#并发-socket" class="headerlink" title="并发 socket"></a>并发 socket</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> socket<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">def</span> <span class="token function">communicate</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>                <span class="token keyword">break</span>            conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> ConnectionResetError<span class="token punctuation">:</span>            <span class="token keyword">break</span>        conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">server</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>    server <span class="token operator">=</span> socket<span class="token punctuation">(</span><span class="token punctuation">)</span>    server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>    server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>communicate<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    server<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    server<span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="稳定的并发-socket"><a href="#稳定的并发-socket" class="headerlink" title="稳定的并发 socket"></a>稳定的并发 socket</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ProcessPoolExecutor<span class="token punctuation">,</span> ThreadPoolExecutor<span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token comment"># 多进程</span><span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> ProcessPoolExecutor<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token string">"egon"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span>wait<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 等待进程执行完之后，再执行后续代码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"end task"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="回调机制"><a href="#回调机制" class="headerlink" title="回调机制"></a>回调机制</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadExecutor<span class="token keyword">import</span> random<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;name: s&#125; is testing"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span> <span class="token string">"res"</span><span class="token punctuation">:</span> res<span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>    result<span class="token punctuation">[</span><span class="token string">'res'</span><span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"&#123;result["</span></span>name<span class="token string">"]&#125;'s score is &#123;result["</span>res<span class="token string">": .1f]&#125;"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    student_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"alex"</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"jone"</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> stu <span class="token keyword">in</span> student_list<span class="token punctuation">:</span>        pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>test<span class="token punctuation">,</span> args<span class="token operator">=</span>stu<span class="token punctuation">)</span><span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>score<span class="token punctuation">)</span>        pool<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span>wait<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"end process"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> requests<span class="token keyword">import</span> multiprocessingurl_list <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token string">"file_name1"</span><span class="token punctuation">:</span> <span class="token string">"web resrouce url1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">"file_name2"</span><span class="token punctuation">:</span> <span class="token string">"web resrouce url2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> name<span class="token punctuation">,</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>        t <span class="token operator">=</span> multi_processing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token punctuation">(</span>name<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 进程间通信方法：</span><span class="token comment"># socket: 可以实现网络进程之间通信</span><span class="token comment"># 文件: 使用文件实现进程通信</span><span class="token comment"># Queue: 先进先出实现进程通信</span><span class="token keyword">from</span> mulitiprocessing <span class="token keyword">import</span> Queue<span class="token punctuation">,</span> Process<span class="token keyword">def</span> <span class="token function">download_data</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> que<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>        que<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process_data</span><span class="token punctuation">(</span>que<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> que<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> que<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    que <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    p1 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>download_data<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> que<span class="token punctuation">)</span><span class="token punctuation">)</span>    p2 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>process_data<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>que<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 进程池会重复利用其中的进程</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token punctuation">,</span> random<span class="token keyword">def</span> <span class="token function">worker</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>msg<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string"> 开始执行，进程号为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec"> 1d</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>po <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    po<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>worker<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    po<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    po<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 主进程结束时间：运行到最后一行代码，守护进程的生命周期也是最好的一行代码</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Lock<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mutex<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> mutex<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"process &#123;i: d&#125; done"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    mutex <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mutex<span class="token punctuation">)</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><ul><li>运行条件：单线程下实现并发，在同一线程内遇到某部分遭遇 I/O 阻塞时，运行其他部分的程序。（用户态上下文切换系统）</li><li>缺点：协程的本质是单线程，可以实现并发，但不能实现并行</li><li>多核 CPU 利用方案：多线程（ CPU 利用）+ 多线程 + 多协程</li></ul><h4 id="greenlet-gevent-创建协程"><a href="#greenlet-gevent-创建协程" class="headerlink" title="greenlet, gevent 创建协程"></a>greenlet, gevent 创建协程</h4><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># gevent 是一个基于 greenlet 构建的高并发网络框架</span><span class="token keyword">from</span> greenlet <span class="token keyword">import</span> greenlet<span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    gr2<span class="token punctuation">.</span>switch<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    gr2<span class="token punctuation">.</span>switch<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    gr1<span class="token punctuation">.</span>switch<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>gr1 <span class="token operator">=</span> greenlet<span class="token punctuation">(</span>func1<span class="token punctuation">)</span>gr2 <span class="token operator">=</span> greenlet<span class="token punctuation">(</span>func2<span class="token punctuation">)</span>gr1<span class="token punctuation">.</span>switch<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="yield-关键字创建协程"><a href="#yield-关键字创建协程" class="headerlink" title="yield 关键字创建协程"></a>yield 关键字创建协程</h4><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">yield</span> <span class="token number">1</span>    <span class="token keyword">yield</span> <span class="token keyword">from</span> func2<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">yield</span> <span class="token number">3</span>    <span class="token keyword">yield</span> <span class="token number">4</span>f1 <span class="token operator">=</span> func1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> f1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="asyncio-装饰器"><a href="#asyncio-装饰器" class="headerlink" title="asyncio 装饰器"></a>asyncio 装饰器</h4><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token decorator annotation punctuation">@asyncio<span class="token punctuation">.</span>coroutine</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token keyword">from</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@asyncio<span class="token punctuation">.</span>coroutine</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token keyword">from</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>tasks <span class="token operator">=</span> <span class="token punctuation">[</span>    asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> func1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> func2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">]</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="async-await-关键字-目前推荐使用"><a href="#async-await-关键字-目前推荐使用" class="headerlink" title="async, await 关键字(目前推荐使用)"></a>async, await 关键字(目前推荐使用)</h4><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>tasks <span class="token operator">=</span> <span class="token punctuation">[</span>    asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> func1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span> func2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">]</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token comment"># await 后只能接可等待对象（协程对象，Future, Task 对象）</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">others</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"strat"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"res"</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"run inner function"</span><span class="token punctuation">)</span>    response1 <span class="token operator">=</span> <span class="token keyword">await</span> others<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"first result"</span><span class="token punctuation">)</span>    response2 <span class="token operator">=</span> <span class="token keyword">await</span> others<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"second result"</span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># task 帮助开发者在事件循环中添加多个任务</span><span class="token comment"># 第一种方式</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main 开始"</span><span class="token punctuation">)</span>    task_list <span class="token operator">=</span> <span class="token punctuation">[</span>        asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span>func1<span class="token punctuation">)</span><span class="token punctuation">,</span>        asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span>func1<span class="token punctuation">)</span>    <span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"main 结束"</span><span class="token punctuation">)</span>    done<span class="token punctuation">,</span> pending <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>task_list<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span><span class="token comment"># 第二种方式</span>task_list <span class="token operator">=</span> <span class="token punctuation">[</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>done<span class="token punctuation">,</span> pending <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>task_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span> main<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token comment"># future 对象</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">set_after</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    fut<span class="token punctuation">.</span>set_result<span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    fut <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_future<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>set_after<span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token keyword">await</span> fut    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># concurrent.futures.Future 对象</span><span class="token keyword">import</span> time <span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> Future<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>thread <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>process <span class="token keyword">import</span> ProcessPoolExecutor<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"123"</span>pool <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fut <span class="token operator">=</span> pool<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>func<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>fut<span class="token punctuation">)</span><span class="token comment"># asyncio 与 concurrent 混用：将同步 io 转换成 异步可等待 io </span><span class="token comment"># 三种不同方式</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> concurrent<span class="token punctuation">.</span>futures<span class="token keyword">def</span> <span class="token function">blocking_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># File operations (such as logging) can block the</span>    <span class="token comment"># event loop: run them in a thread pool.</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/dev/urandom'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cpu_bound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># CPU-bound operations will block the event loop:</span>    <span class="token comment"># in general it is preferable to run them in a</span>    <span class="token comment"># process pool.</span>    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>i <span class="token operator">*</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">**</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">## Options:</span>    <span class="token comment"># 1. Run in the default loop's executor:</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span>        <span class="token boolean">None</span><span class="token punctuation">,</span> blocking_io<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'default thread pool'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>    <span class="token comment"># 2. Run in a custom thread pool:</span>    <span class="token keyword">with</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span>            pool<span class="token punctuation">,</span> blocking_io<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'custom thread pool'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>    <span class="token comment"># 3. Run in a custom process pool:</span>    <span class="token keyword">with</span> concurrent<span class="token punctuation">.</span>futures<span class="token punctuation">.</span>ProcessPoolExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span>            pool<span class="token punctuation">,</span> cpu_bound<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'custom process pool'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 实战实例</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> requests<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">download_image</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"start download:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>url<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># requests 不支持异步操作，因此使用线程池配合实现</span>    future <span class="token operator">=</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">,</span> url<span class="token punctuation">)</span>    response <span class="token operator">=</span> <span class="token keyword">await</span> future    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"end download"</span><span class="token punctuation">)</span>    file_name <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_object<span class="token punctuation">:</span>        file_object<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    url_list <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"https://tse4-mm.cn.bing.net/th/id/OIP-C.L9oad19e_zRgp56GafIGsQHaEN?w=312&amp;h=180&amp;c=7&amp;r=0&amp;o=5&amp;dpr=2&amp;pid=1.7"</span><span class="token punctuation">,</span>        <span class="token string">"https://tse2-mm.cn.bing.net/th/id/OIP-C.W6qFu8mmevEiZPfCJWm7EAHaEQ?w=269&amp;h=180&amp;c=7&amp;r=0&amp;o=5&amp;dpr=2&amp;pid=1.7"</span>    <span class="token punctuation">]</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>download_image<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">]</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="异步迭代器和异步可迭代方法"><a href="#异步迭代器和异步可迭代方法" class="headerlink" title="异步迭代器和异步可迭代方法"></a>异步迭代器和异步可迭代方法</h2><ul><li>实现了 <strong>aiter</strong> 和 <strong>anext</strong> 方法的对象</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">class</span> <span class="token class-name">Reader</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">readline</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>count    <span class="token keyword">def</span> <span class="token function">_aiter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">__anext__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        val <span class="token operator">=</span> <span class="token keyword">await</span> self<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopAsyncIteration        <span class="token keyword">return</span> val<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    obj <span class="token operator">=</span> Reader<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> obj<span class="token punctuation">:</span> <span class="token comment"># async for 必须嵌套在协程函数内部</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="异步上下文管理器"><a href="#异步上下文管理器" class="headerlink" title="异步上下文管理器"></a>异步上下文管理器</h2><ul><li>定义了 <strong>aenter</strong>() 和 <strong>aexit</strong>() 方法的 async with 关键字<div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AsyncContextManager</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> conn    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">do_something</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"666"</span>    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">__aenter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self    <span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">__aexit__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> AsyncContextManager<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> <span class="token comment"># 必须嵌套在协程函数内部</span>        result <span class="token operator">=</span> <span class="token keyword">await</span> f<span class="token punctuation">.</span>do_something<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul><h2 id="uvloop"><a href="#uvloop" class="headerlink" title="uvloop"></a>uvloop</h2><ul><li>asyncio 的替代品，由第三方维护，性能高于 asyncio, 性能据说可以达到 go 语言</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># pip install uvloop</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> uvloopasyncio<span class="token punctuation">.</span>set_event_loop_policy<span class="token punctuation">(</span>uvloop<span class="token punctuation">.</span>EventLoopPolicy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 编写 asyncio 的代码，与之前写的代码一致</span><span class="token comment"># 内部的事件循环自动化变为 uvloop</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>```  <span class="token comment">## 异步操作数据库</span>```python<span class="token comment"># 数据库链接、操作、断开都是 I/O 操作</span><span class="token comment"># pip install aiomysql</span><span class="token comment"># pip install aioredis</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aiomysql<span class="token keyword">import</span> aioredis<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute_redis</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"start redis"</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span>    redis <span class="token operator">=</span> <span class="token keyword">await</span> aioredis<span class="token punctuation">.</span>create_redis<span class="token punctuation">(</span>address<span class="token punctuation">,</span> password<span class="token operator">=</span>passowrd<span class="token punctuation">)</span>    <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hmset_dict<span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> key1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> key2<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> key3<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    redis<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> redis<span class="token punctuation">.</span>wait_closed<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"end redis"</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">exexcute_mysql</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"start mysql"</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span>    conn <span class="token operator">=</span> <span class="token keyword">await</span> aiomysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span>host<span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span> password<span class="token operator">=</span>password<span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">"mysql"</span><span class="token punctuation">)</span>    cur <span class="token operator">=</span> <span class="token keyword">await</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT Host, User FROM user"</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>task_list <span class="token operator">=</span> <span class="token punctuation">[</span>    execute_redis<span class="token punctuation">(</span><span class="token string">"redis://127.0.0.1:6379"</span><span class="token punctuation">,</span> <span class="token string">"root123456"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    execute_mysql<span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token string">"root123456"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>task_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="FastApi-框架"><a href="#FastApi-框架" class="headerlink" title="FastApi 框架"></a>FastApi 框架</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> uvicorn<span class="token keyword">import</span> aioredis<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello World"</span><span class="token punctuation">&#125;</span>REDIS_POOL <span class="token operator">=</span> aioredis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span><span class="token string">"redis://127.0.0.1:6379"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"root123"</span><span class="token punctuation">,</span> minsize<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> maxsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">"/red"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"request accpeted"</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    conn <span class="token operator">=</span> <span class="token keyword">await</span> REDIS_POOL<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>    <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hmset_dict<span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> key1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> key2<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> key3<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> redis<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    REDIS_POOL<span class="token punctuation">.</span>release<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>    <span class="token keyword">return</span> result <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">"main:app"</span><span class="token punctuation">,</span> host<span class="token operator">=</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">"info"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>高效编程</title>
    <link href="/2022/03/04/%E9%AB%98%E6%95%88%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/03/04/%E9%AB%98%E6%95%88%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-高效编程"><a href="#Python-高效编程" class="headerlink" title="Python 高效编程"></a>Python 高效编程</h1><h2 id="bisect"><a href="#bisect" class="headerlink" title="bisect"></a>bisect</h2><p>用于有序数列的插入和排序</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>时空测试</title>
    <link href="/2022/03/04/%E6%97%B6%E7%A9%BA%E6%B5%8B%E8%AF%95/"/>
    <url>/2022/03/04/%E6%97%B6%E7%A9%BA%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-代码的时空效率测试"><a href="#Python-代码的时空效率测试" class="headerlink" title="Python 代码的时空效率测试"></a>Python 代码的时空效率测试</h1><h2 id="空间效率"><a href="#空间效率" class="headerlink" title="空间效率"></a>空间效率</h2><h4 id="line-profiler-模块"><a href="#line-profiler-模块" class="headerlink" title="line_profiler 模块"></a>line_profiler 模块</h4><h2 id="时间效率"><a href="#时间效率" class="headerlink" title="时间效率"></a>时间效率</h2><h4 id="memory-profiler-模块"><a href="#memory-profiler-模块" class="headerlink" title="memory_profiler 模块"></a>memory_profiler 模块</h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>模型落地总结</title>
    <link href="/2022/03/04/%E6%A8%A1%E5%9E%8B%E8%90%BD%E5%9C%B0%E6%80%BB%E7%BB%93/"/>
    <url>/2022/03/04/%E6%A8%A1%E5%9E%8B%E8%90%BD%E5%9C%B0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="模型落地"><a href="#模型落地" class="headerlink" title="模型落地"></a>模型落地</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li>多线程：多线程中内存共享，通信速度快</li><li>多进程部署：多进程会运行多个程序，进程之间相互独立 <ul><li>优点：cpu, gpu 资源，导致同一程序创建多份运行，导致gpu内存上升</li><li>缺点：</li></ul></li></ul><ol><li>测试数据预处理时间和前向传播时间<br>确定具体使用的协程数量：crofile</li><li>确定模型时 计算密集型还是内存密集型（一般而言，由于推理时 batchsize 设置较小，模型均为计算密集型， 除非对请求集中于同一 batch，造成 batch size 较大）</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>网络通信实战</title>
    <link href="/2022/03/03/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%AE%9E%E6%88%98/"/>
    <url>/2022/03/03/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%AE%9E%E6%88%98/</url>
    
    <content type="html"><![CDATA[<h1 id="网络通信实战"><a href="#网络通信实战" class="headerlink" title="网络通信实战"></a>网络通信实战</h1><h2 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>socket 并非 OSI, 或者 TCP/IP 参考模型中的某一个协议， 而是程序员在实际应用编程中总结出的一个<strong>规范化的通信编程接口</strong>，可以实现不同程序间相互通信，包括<strong>本地进程间通信</strong>和<strong>网络进程间通信</strong>；实现网络通信时，其位置看做位于 TCP/IP 模型中<strong>应用层和传输层之间</strong>；</li></ul><h4 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h4><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment"># server</span>sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    connection<span class="token punctuation">,</span> address <span class="token operator">=</span> sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    client_data <span class="token operator">=</span> connection<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>client_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    connection<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"nice to meet you, too."</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># client</span>client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"nice to meet you"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>reply <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>reply<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="IO-多路复用-非阻塞-select"><a href="#IO-多路复用-非阻塞-select" class="headerlink" title="IO 多路复用 + 非阻塞 + select"></a>IO 多路复用 + 非阻塞 + select</h4><ul><li>优点：<ul><li>可以做些其他的事情</li><li>让服务端支持支持多个客户端连接</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> select<span class="token comment"># server</span>server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>server<span class="token punctuation">.</span>setblocking<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>inputs <span class="token operator">=</span> <span class="token punctuation">[</span>server<span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment"># rlist: wait until ready for reading  </span>    <span class="token comment"># wlist: wait until ready for writing  </span>    <span class="token comment"># xlist: wait for an “exceptional condition</span>    r<span class="token punctuation">,</span> w<span class="token punctuation">,</span> e <span class="token operator">=</span> select<span class="token punctuation">.</span>select<span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0.05</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> sock <span class="token keyword">in</span> r<span class="token punctuation">:</span>        <span class="token keyword">if</span> sock <span class="token operator">==</span> server<span class="token punctuation">:</span>            conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"有新连接出现"</span><span class="token punctuation">)</span>            inputs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>conn<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> data<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"收到消息："</span>， data<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"关闭连接"</span><span class="token punctuation">)</span>                inputs<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token comment"># client</span><span class="token keyword">import</span> os<span class="token keyword">import</span> uuid<span class="token keyword">import</span> socket <span class="token keyword">import</span> selectclient_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>    client<span class="token punctuation">.</span>setblocking<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> BlockingIOError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    client_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>client<span class="token punctuation">)</span>recv_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    r<span class="token punctuation">,</span> w<span class="token punctuation">,</span> e <span class="token operator">=</span> select<span class="token punctuation">.</span>select<span class="token punctuation">(</span>recv_list<span class="token punctuation">,</span> client_list<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> sock <span class="token keyword">in</span> w<span class="token punctuation">:</span>        sock<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">b"GET / nginx-logo.png HTTP/1.1\r\nHost:47.98.134.86\r\n\r\n"</span><span class="token punctuation">)</span>        recv_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>        client_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>    <span class="token keyword">for</span> sock <span class="token keyword">in</span> r<span class="token punctuation">:</span>        data <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8196</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> datta<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">b"\r\n\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        random_file_name <span class="token operator">=</span> <span class="token string">"&#123;&#125;.png"</span><span class="token punctuation">.</span>formate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"images"</span><span class="token punctuation">,</span> random_file_name<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        recv_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> recv_list <span class="token keyword">and</span> <span class="token keyword">not</span> client_list<span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="IO-多路复用-非阻塞-epoll"><a href="#IO-多路复用-非阻塞-epoll" class="headerlink" title="IO 多路复用 + 非阻塞 + epoll"></a>IO 多路复用 + 非阻塞 + epoll</h4><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket <span class="token keyword">import</span> select<span class="token keyword">import</span> Queue<span class="token comment"># server</span>server <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>serversocket<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># ip 复用</span>server<span class="token punctuation">.</span>setblocking<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>epoll <span class="token operator">=</span> select<span class="token punctuation">.</span>epoll<span class="token punctuation">(</span><span class="token punctuation">)</span>epoll<span class="token punctuation">.</span>register<span class="token punctuation">(</span>server<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> select<span class="token punctuation">.</span>EPOLLIN<span class="token punctuation">)</span>timeout <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">try</span><span class="token punctuation">:</span>    conns <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        events <span class="token operator">=</span> epoll<span class="token punctuation">.</span>poll<span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h4 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h4><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment"># server</span>sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> sock<span class="token punctuation">.</span>accpet<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    total_file_size <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'xxx.png'</span><span class="token punctuation">,</span> <span class="token string">'ab'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        recv_size <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>            recv_size  <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">if</span> recv_size <span class="token operator">==</span> total_file_size<span class="token punctuation">:</span>                <span class="token keyword">break</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># client</span><span class="token keyword">import</span> os<span class="token keyword">import</span> timeclient <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>file_path <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"type file path, please"</span><span class="token punctuation">)</span>file_size <span class="token operator">=</span> os<span class="token punctuation">.</span>stat<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">.</span>st_sizeclient<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>file_size<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ready to upload..."</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"start to upload..."</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    read_size <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        chunk <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        client<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>        read_size <span class="token operator">+=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>        <span class="token keyword">if</span> read_size <span class="token operator">==</span> file_size<span class="token punctuation">:</span>            <span class="token keyword">break</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket <span class="token comment"># server</span>servere <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    data<span class="token punctuation">,</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span> <span class="token operator">=</span> server<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>    server<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span><span class="token string">"收到"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># client</span>client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    text <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入要发送的内容："</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> text<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"Q"</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    client<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data<span class="token punctuation">,</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span> <span class="token operator">=</span> client<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment"># server</span>sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    connection<span class="token punctuation">,</span> address <span class="token operator">=</span> sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    client_data <span class="token operator">=</span> connection<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>client_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    connection<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"nice to meet you, too."</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># client</span>client <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span><span class="token string">"nice to meet you"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>reply <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>reply<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="粘包的解决"><a href="#粘包的解决" class="headerlink" title="粘包的解决"></a>粘包的解决</h2><ul><li>每次发送前，发送数据的长度</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket <span class="token keyword">import</span> struct<span class="token comment"># server</span>sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>  sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    header <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    data_len <span class="token operator">=</span> struct<span class="token punctuation">.</span>unpack<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">,</span> header<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>data_len<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># client</span>client <span class="token operator">=</span> docket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0."</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token string">"some word"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>data_len <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>data_len<span class="token punctuation">)</span>client<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>data<span class="token punctuation">)</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络编程（一）</title>
    <link href="/2022/03/03/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/03/03/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="网络基础知识"><a href="#网络基础知识" class="headerlink" title="网络基础知识"></a>网络基础知识</h1><h2 id="OSI-参考模型"><a href="#OSI-参考模型" class="headerlink" title="OSI 参考模型"></a>OSI 参考模型</h2><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>OSI协议是为了让计算机之间能够相互通信而提出的一种协议</p><h5 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h5><p>物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</p><h5 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h5><ul><li>物理层：为上层提供一个物理的连接，实现透明的比特流传输（<strong>传输</strong>）</li><li>数据链路层：负责在2个相邻的结点之间的链路上实现无差错的数据帧传输（<strong>同步</strong>）</li><li>网络层：为要传输的分组选择一条合适的路径，使发送分组能够正确无误地按照给定的目的地址找到目的主机（<strong>路由</strong>）</li><li>传输层：2个端系统的会话层之间建立一条连接通道，以透明地传输报文（<strong>建立、管理和维护连接</strong>）</li><li>会话层：会话层以及以上各层中，数据的传输都以报文为单位，会话层不参与具体的传输，它提供包括访问验证和会话管理在内的建立以及维护应用之间的通信机制（<strong>会话建立、维护、验证</strong>）</li><li>表示层：提供格式化的表示和转换数据服务。数据的压缩和解压缩、加密和解密等工（<strong>数据格式转化、数据加密</strong>）</li><li>应用层：确定进程之间通信的性质，提供网络与用户软件之间的接口服务（<strong>服务程序</strong>）</li></ul><h2 id="TCP-IP-模型"><a href="#TCP-IP-模型" class="headerlink" title="TCP/IP 模型"></a>TCP/IP 模型</h2><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><p>TCP/IP协议不是单纯的某一个协议，也不是单指TCP协议，而是一个协议族</p><h5 id="详细介绍-1"><a href="#详细介绍-1" class="headerlink" title="详细介绍"></a>详细介绍</h5><ul><li>应用层：主要协议有 DNS,URI,HTML,HTTP,SSL,SMTP,POP,IMAPTELNET，SSH,FTP,SNMP，是用来接收来自传输层的数据或者按不同应用要求与方式将数据传输至传输层（<strong>处理应用程序逻辑</strong>）</li><li>传输层：主要协议有 TCP,UDP,UDP-Lite,SCTP,DCCP，是使用者使用平台和计算机信息网内部数据结合的通道，可以实现数据传输与数据共享（<strong>进行数据传输协议</strong>）</li><li>网络 IP 层: 主要协议有 ICMP、IP、IGMP，主要负责网络中数据包的传送等（<strong>路由和转发</strong>）</li><li>数据链路层: 主要协议有ARP、RARP，主要是提供链路管理错误检测、对不同通信媒介有关信息细节问题进行有效处理等。（<strong>数据流同步</strong>）</li><li>物理层：为上层提供一个物理的连接，实现透明的比特流传输（<strong>传输</strong>）</li></ul><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h5 id="子网掩码和-IP"><a href="#子网掩码和-IP" class="headerlink" title="子网掩码和 IP"></a>子网掩码和 IP</h5><ul><li><p>网络地址相同的 IP, 称为属于同一个网段，局域网内相同网络 IP 才能通信，不同 IP 相要通信需要路由转发才能通信</p></li><li><p>网络地址通过子网掩码掩盖之后，划分为网络地址和主机地址，属于同一网络的主机可以实现局域通信</p></li><li><p>子网掩码：255.255.240.0 即 11111111, 11111111, 11111100, 000000000</p></li><li><p>IP 地址：192.168.99.254 即 11000000, 10101000, 01100011, 11111110</p></li><li><p>掩盖之后网络地址： 11000000, 10101000, 011000   </p></li><li><p>掩盖之后主机地址： 11, 11111110</p></li></ul><h5 id="B-S-和-C-S-架构"><a href="#B-S-和-C-S-架构" class="headerlink" title="B/S 和 C/S 架构"></a>B/S 和 C/S 架构</h5><ul><li>B/S 架构：broswer 和 server, 只需要开发服务端</li><li>C/S 架构：client 和 server, 需要开发服务端和客户端</li></ul><h5 id="TCP-和-UDP-协议"><a href="#TCP-和-UDP-协议" class="headerlink" title="TCP 和 UDP 协议"></a>TCP 和 UDP 协议</h5><ul><li>UDP: 不提供可靠性，只是将应用程序传给 IP 层的数据报发布出去，并不能保证到达目的地，传输速度很快。</li><li>TCP: 面向连接的协议，收发数据之前，必须和对方建立可靠的连接，而后进行数据收发。</li></ul><h5 id="三次握手和四次挥手"><a href="#三次握手和四次挥手" class="headerlink" title="三次握手和四次挥手"></a>三次握手和四次挥手</h5><h6 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h6><ul><li>意义：明确自己和对方的收、发能力是正常的</li><li>过程：<ul><li>第一次握手：客户端发送网络包，服务端收到（<strong>客户端的发送能力、服务端的接收能力正常</strong>）</li><li>第二次握手：服务端发包，客户端收到（<strong>服务端的接收、发送能力，客户端的接收、发送能力正常</strong>）</li><li>第三次握手：第一、二次握手后，<strong>服务端并不知道客户端的接收能力以及自己的发送能力是否正常</strong>，因此才需要再握手一次来让服务端确认<h6 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h6></li></ul></li><li>过程：<ul><li>第一次挥手：表示主机 <strong>A 没有数据要发送</strong>给主机B了</li><li>第二次挥手：主机 B 告诉主机 A, <strong>B 也没有数据要发送</strong></li><li>第三次挥手：主机 <strong>B</strong> 向主机 A 发送 FIN 报文段，<strong>请求关闭连接</strong></li><li>第四次挥手：主机 <strong>A 收到</strong>主机 B 发送的 <strong>FIN</strong> 报文段，<strong>向主机 B 发送 ACK</strong> 报文段，并<strong>结束连接</strong>；主机 B 收到 <strong>A 的 ACK 报文，知道 A 已经结束，则 B 也结束连接</strong></li></ul></li></ul><h5 id="粘包"><a href="#粘包" class="headerlink" title="粘包"></a>粘包</h5><ul><li>两台电脑进行数据收发时，并非将数据直接传输给对方</li><li>发送者：sendall/send 时，将数据发送至网卡缓冲区，再由缓冲区发送至对方网卡缓冲区</li><li>接受者：recv 时，从网卡缓冲区读取数据</li><li>若<strong>发送者快速发送两条消息，而接受者认为是一条</strong>：两个数据包粘在一起了</li></ul><h5 id="select-poll-epoll"><a href="#select-poll-epoll" class="headerlink" title="select, poll, epoll"></a>select, poll, epoll</h5><ul><li><p>select: 时间复杂度 O(n), select 方法仅仅知道有 I/O 事件发生，因此只能无差别轮询，处理的流越多，轮询时间就越长</p></li><li><p>poll: 时间复杂度 O(n), poll 方法查询同 select 方法，但因为采用链表存储，因此没有最大连接数目的限制</p></li><li><p>epoll: 时间复杂度 O(1), 采用事件驱动，会将每个流具体的 I/O 事件<br>进行通知，因此对这些流的操作复杂度降到了 O(1)</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>行为型模式</title>
    <link href="/2022/03/03/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/03/03/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h1><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><ul><li>内容：使多个对象都有机会处理请求，避免了请求发送者和接受者之间的耦合关系，将对象练成一条链，沿着链传递请求直到有对象处理为止</li><li>优点：<ul><li>降低耦合度，一个对象无需知道是其他哪一个对象处理其请求<div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">handler_leave</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">GeneralManager</span><span class="token punctuation">(</span>Handler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">handler_leave</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> day <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"you can leave </span><span class="token interpolation"><span class="token punctuation">&#123;</span>day<span class="token punctuation">:</span><span class="token format-spec"> .1f</span><span class="token punctuation">&#125;</span></span><span class="token string"> days"</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"quit, please"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DepartmentManager</span><span class="token punctuation">(</span>Handler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> GeneralManager<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">handler_leave</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> day <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"you can leave </span><span class="token interpolation"><span class="token punctuation">&#123;</span>day<span class="token punctuation">:</span><span class="token format-spec"> .1f</span><span class="token punctuation">&#125;</span></span><span class="token string"> day"</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>handler_leave<span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ProjectDirector</span><span class="token punctuation">(</span>Handler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> DepartmentManager<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">handle_leave</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> day <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"you can leave </span><span class="token interpolation"><span class="token punctuation">&#123;</span>day<span class="token punctuation">:</span><span class="token format-spec"> .1f</span><span class="token punctuation">&#125;</span></span><span class="token string"> day"</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span>handler_leave<span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token comment"># client</span>day <span class="token operator">=</span> <span class="token number">4</span>h <span class="token operator">=</span> ProjectDirector<span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span>handle_leave<span class="token punctuation">(</span>day<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul></li></ul><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ul><li>内容：定义对象之间的一种一对多的依赖关系，当一个对象的状态发生改变时，所以依赖的对象都得到通知并被自动更新，又称“发布-订阅”模式</li><li>优点：<ul><li>目标和观察者之间的抽象耦合度很小，支持广播通信<div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> notice<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Notice</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init_</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">attach</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>observers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">detach</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obs<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>observes<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>obs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">notify</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> obs <span class="token keyword">in</span> self<span class="token punctuation">.</span>observers<span class="token punctuation">:</span>            obs<span class="token punctuation">.</span>update<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">StaffNotice</span><span class="token punctuation">(</span>Notice<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> company_info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__compay_info <span class="token operator">=</span> company_info    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">company_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__company_info    <span class="token comment"># 装饰器更新私有属性值</span>    <span class="token decorator annotation punctuation">@company_info<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">company_info</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__company_info <span class="token operator">=</span> info        self<span class="token punctuation">.</span>notify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Staff</span><span class="token punctuation">(</span>Observer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>company_info <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> notice<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>company_info <span class="token operator">=</span> notice<span class="token punctuation">.</span>company_info<span class="token comment"># client</span>notice <span class="token operator">=</span> StaffNotice<span class="token punctuation">(</span><span class="token string">"company info"</span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> Staff<span class="token punctuation">(</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Staff<span class="token punctuation">(</span><span class="token punctuation">)</span>notice<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>notice<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>notice<span class="token punctuation">.</span>company_info <span class="token operator">=</span> <span class="token string">"new company info"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>company_info<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul></li></ul><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><ul><li>内容：定义一系列算法，将其一个个封装，使其可以互相替换，使得算法独立于客户而变化。</li><li>优点：   <ul><li>定义了一系列可以重用的算法和行为，消除了条件语句</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Strategy</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">FastStrategy</span><span class="token punctuation">(</span>Strategy<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"fast strategy&#123;data: s&#125;"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">SlowStrategy</span><span class="token punctuation">(</span>Strategy<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"slow strategy&#123;data: s&#125;"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Context</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strategy<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data        self<span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy    <span class="token keyword">def</span> <span class="token function">set_strategy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strategy<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy    <span class="token keyword">def</span> <span class="token function">do_strategy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strategy<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token comment"># client</span>data <span class="token operator">=</span> <span class="token string">"..."</span>s1 <span class="token operator">=</span> FastStrategy<span class="token punctuation">(</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> SlowStrategy<span class="token punctuation">(</span><span class="token punctuation">)</span>context <span class="token operator">=</span> Context<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> data<span class="token punctuation">)</span>context<span class="token punctuation">.</span>do_strategy<span class="token punctuation">(</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>set_strategy<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>context<span class="token punctuation">.</span>do_strategy<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><ul><li>内容：定义了一个操作的算法的框架，而将一些步骤延迟到了子类中，使得子类可以不改变算法的结构即可重新定义算法的某些特定步骤</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">DatasetValid</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> Path<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>exist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> FileNotFoundError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"not found path</span><span class="token interpolation"><span class="token punctuation">&#123;</span>root<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> root        self<span class="token punctuation">.</span><span class="token builtin">set</span> <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">valid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">__get_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>码力升级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结构型模式</title>
    <link href="/2022/03/02/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/03/02/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h1><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><ul><li>内容：将一个类的接口转换成客户希望的另一个接口，使由于接口不兼容而无法共同工作的类可以协作</li><li>实现方式：<ul><li>类适配器：多继承</li><li>对象适配器：组合</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Alipay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"支付宝支付</span><span class="token interpolation"><span class="token punctuation">&#123;</span>money<span class="token punctuation">:</span><span class="token format-spec"> d</span><span class="token punctuation">&#125;</span></span><span class="token string">元"</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">WechatPay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"微信支付</span><span class="token interpolation"><span class="token punctuation">&#123;</span>money<span class="token punctuation">:</span><span class="token format-spec"> d</span><span class="token punctuation">&#125;</span></span><span class="token string">元"</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BankPay</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">cost</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"银联支付</span><span class="token interpolation"><span class="token punctuation">&#123;</span>money<span class="token punctuation">:</span><span class="token format-spec"> d</span><span class="token punctuation">&#125;</span></span><span class="token string">元"</span></span><span class="token punctuation">)</span><span class="token comment"># 使用多继承实现适配器，使接口保持了一致</span><span class="token keyword">class</span> <span class="token class-name">InheritBankPay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">,</span> BankPay<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cost<span class="token punctuation">(</span>money<span class="token punctuation">)</span>p1 <span class="token operator">=</span> InheritBankPay<span class="token punctuation">(</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>pay<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token comment"># 使用组合类实现适配器，使接口保持了一致</span><span class="token keyword">class</span> <span class="token class-name">CompositeBankPay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> payment<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>payment <span class="token operator">=</span> payment    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>payment<span class="token punctuation">.</span>cost<span class="token punctuation">(</span>money<span class="token punctuation">)</span>p2 <span class="token operator">=</span> CompositeBankPay<span class="token punctuation">(</span>BankPay<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p2<span class="token punctuation">.</span>pay<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="桥模式"><a href="#桥模式" class="headerlink" title="桥模式"></a>桥模式</h2><ul><li>内容：将一个事物的两个维度分离，使其可以独立的变化, 可以很便利的在不同维度添加对象</li><li>优点：<ul><li>抽象和实现相互分离</li><li>优秀的扩展能力</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Shape</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeat<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>color <span class="token operator">=</span> color    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Color</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">paint</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> shape<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span>Shape<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"rectangle"</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>color<span class="token punctuation">.</span>paint<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span>Shape<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"Triangle"</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>color<span class="token punctuation">.</span>paint<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Red</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">paint</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> shape<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"red </span><span class="token interpolation"><span class="token punctuation">&#123;</span>shape<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Green</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">paint</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> shape<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"green </span><span class="token interpolation"><span class="token punctuation">&#123;</span>shape<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>shape1 <span class="token operator">=</span> Rectangle<span class="token punctuation">(</span>Green<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shape1<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>shape2 <span class="token operator">=</span> Triangle<span class="token punctuation">(</span>Red<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shape2<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><ul><li>内容：将对象组合成树形结构以表示“部分-整体”的层次结构，使得单个对象和组合对象的使用具有一致性。</li><li>优点：<ul><li>定义了包含基本对象和组合对象的层次结构</li><li>简化了客户端代码，使客户端可以一致使用组合对象和单个对象</li><li>更容易增加新类型的组件</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Graphic</span><span class="token punctuation">(</span>meataclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">Point</span><span class="token punctuation">(</span>Graphic<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"point(</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>x<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>y<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">)"</span></span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Line</span><span class="token punctuation">(</span>Graphic<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>p1 <span class="token operator">=</span> p1        self<span class="token punctuation">.</span>p2 <span class="token operator">=</span> p2    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"line[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>p1<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>p2<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">]"</span></span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Picture</span><span class="token punctuation">(</span>Graphic<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> iterable<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> g <span class="token keyword">in</span> iterable<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>add<span class="token punctuation">(</span>g<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> graphic<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>children<span class="token punctuation">.</span>append<span class="token punctuation">(</span>grapic<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----compisition graphic-----"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> g <span class="token keyword">in</span> self<span class="token punctuation">.</span>childern<span class="token punctuation">:</span>            g<span class="token punctuation">.</span>draw<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----compisition graphic-----"</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> Point<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>l1 <span class="token operator">=</span> Line<span class="token punctuation">(</span>Point<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Point<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>l2 <span class="token operator">=</span> Line<span class="token punctuation">(</span>Point<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pic1 <span class="token operator">=</span> Picture<span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><ul><li>内容：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，使得这一子系统更加容易使用。<div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CPU</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"cpu is running"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">stop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"cpu stop run"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Disk</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"disk is running"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">stop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"disk stop run"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Memory</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"memory is running"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">stop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"memory stop run"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cpu <span class="token operator">=</span>  CPU<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>disk <span class="token operator">=</span> Disk        self<span class="token punctuation">.</span>memory <span class="token operator">=</span> Memory        <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cpu<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>disk<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">stop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cpu<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>disk<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>computer <span class="token operator">=</span> Computer<span class="token punctuation">(</span><span class="token punctuation">)</span>computer<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>computer<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></li></ul><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ul><li>内容：为其他对象提供一种代理以控制对这个对象的访问</li><li>优点：<ul><li>实代理:可以隐藏对象位于远程地址空间的事实</li><li>虚代理:可以进行优化，节省不必要的系统开销</li><li>保护代理：允许访问对象时进行附加处理</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">set_content</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">RealProxy</span><span class="token punctuation">(</span>Subject<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename <span class="token operator">=</span> filename        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>content        <span class="token keyword">def</span> <span class="token function">set_content</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment"># 虚代理实现内存节省</span><span class="token keyword">class</span> <span class="token class-name">VirtualProxy</span><span class="token punctuation">(</span>Subject<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename <span class="token operator">=</span> filename        self<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>content<span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>content     <span class="token keyword">def</span> <span class="token function">set_content</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment"># 保护代理</span><span class="token keyword">class</span> <span class="token class-name">ProtectedProxy</span><span class="token punctuation">(</span>Subject<span class="token punctuation">)</span>；    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename <span class="token operator">=</span> filename        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>content        <span class="token keyword">def</span> <span class="token function">set_content</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> PermissionError<span class="token punctuation">(</span><span class="token string">"no permission to write content"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>码力升级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建型模式</title>
    <link href="/2022/03/02/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/03/02/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h1><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul><li>内容：不要向客户类暴露对象创建的细节，而是工厂类负责创建产品类的实例</li><li>优点：<ul><li>隐藏了对象创建的实现细节</li><li>客户类不需要修改代码</li></ul></li><li>缺点：<ul><li>违背了单一职责原则，将创建逻辑集中到了一个类中</li><li>添加新产品时，需要修改工厂类代码，违背了开闭原则</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">PaymentFactory</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">create_payment</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">"alipay"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Alipay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">"wechat"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> WechatPay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># elif new method"</span>        <span class="token comment"># new class </span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"No such payment named </span><span class="token interpolation"><span class="token punctuation">&#123;</span>method<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><ul><li>内容：定义了创建对象的抽象接口（工厂接口）</li><li>优点：<ul><li>每个具体产品都对应一个具体工厂类，不需要修改工厂类代码</li><li>隐藏了对象创建的具体细节</li></ul></li><li>缺点：<ul><li>每增加一个具体产品类，就需要增加一个相应的具体工厂类</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">PaymentFactory</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">create_payment</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">AlipayFactory</span><span class="token punctuation">(</span>PaymentFactory<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">create_payment</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Alipay<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">WechatFactory</span><span class="token punctuation">(</span>PaymentFactory<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">create_payment</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> WechatPay<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><ul><li>内容：定义了工厂类接口，使工厂子类创建一系列相关或者相互依赖的对象，相比工厂方法模式，抽象工厂模式中每一个具体具体工厂都生产一套产品</li><li>优点：<ul><li>将客户端与类的具体实现相分离</li><li>每个工厂都创建一个完整的产品系列，便于交换产品</li><li>有利于产品的一致性</li></ul></li><li>缺点：<ul><li>难以支持新种类的产品</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMata<span class="token punctuation">,</span> abstractmethod<span class="token comment"># 抽象产品 </span><span class="token keyword">class</span> <span class="token class-name">PhoneShell</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">show_shell</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">CPU</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">show_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">OS</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">show_os</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token comment"># 抽象工厂</span><span class="token keyword">class</span> <span class="token class-name">PhoneFactory</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">make_shell</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token decorator annotation punctuation">@abstractmethod</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">make_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token decorator annotation punctuation">@abstractmethod</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">make_os</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token comment"># 具体产品</span><span class="token keyword">class</span> <span class="token class-name">SmallShell</span><span class="token punctuation">(</span>PhoneShell<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_shell</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"small shell"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">BigShell</span><span class="token punctuation">(</span>PhoneShell<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_shell</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"big shell"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AppleShell</span><span class="token punctuation">(</span>PhoneShell<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_shell</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'apple shell'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">SnapDragonCPU</span><span class="token punctuation">(</span>CPU<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'snapdragon cpu'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AppleCPU</span><span class="token punctuation">(</span>CPU<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'apple cpu'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Android</span><span class="token punctuation">(</span>OS<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_os</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ios os'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">IOS</span><span class="token punctuation">(</span>OS<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">show_os</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ios os'</span><span class="token punctuation">)</span>        <span class="token comment"># 具体工厂</span><span class="token keyword">class</span> <span class="token class-name">MiFactory</span><span class="token punctuation">(</span>PhoneFactory<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">make_shell</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> BigShell<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">make_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> SnapDragonCPU<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_os</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Android<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">IPhone</span><span class="token punctuation">(</span>PhoneFactory<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">make_shell</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AppleShell<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_cpu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> AppleCPU<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">make_os</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>  IOS<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 客户端</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> shell<span class="token punctuation">,</span> cpu<span class="token punctuation">,</span> os<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu        self<span class="token punctuation">.</span>os <span class="token operator">=</span> os        self<span class="token punctuation">.</span>shell <span class="token operator">=</span> shell    <span class="token keyword">def</span> <span class="token function">show_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"手机信息"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cpu<span class="token punctuation">.</span>show_cpu<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>os<span class="token punctuation">.</span>show_os<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>shell<span class="token punctuation">.</span>show_shell<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">make_phone</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">:</span>    cpu <span class="token operator">=</span> factory<span class="token punctuation">.</span>make_cpu<span class="token punctuation">(</span><span class="token punctuation">)</span>    os <span class="token operator">=</span> factory<span class="token punctuation">.</span>make_os<span class="token punctuation">(</span><span class="token punctuation">)</span>    shell <span class="token operator">=</span> factory<span class="token punctuation">.</span>make_shell<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Phone<span class="token punctuation">(</span>shell<span class="token punctuation">,</span> cpu<span class="token punctuation">,</span> os<span class="token punctuation">)</span>p1 <span class="token operator">=</span> make_phone<span class="token punctuation">(</span>MiFactory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>show_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><ul><li>内容：将一个复杂对象的构建与它的表示分离，是使得不同的构建过程可以创建不同的表示；与抽象工厂模式相比，建造者模式着重于一步步构建复杂对象，而抽象工厂模式着重于创建多个系列的产品对象</li><li>优点：<ul><li>隐藏了产品的内部结构和装配过程</li><li>将构造代码与表示代码分离</li><li>可以对构造过程进行更精细的控制</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Player</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> face <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> body <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> arm <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span> leg <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>face <span class="token operator">=</span> face        self<span class="token punctuation">.</span>leg <span class="token operator">=</span> leg        self<span class="token punctuation">.</span>arm <span class="token operator">=</span> arm        self<span class="token punctuation">.</span>leg <span class="token operator">=</span> leg        <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>face<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>body<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>arm<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>leg<span class="token punctuation">:</span><span class="token format-spec"> s</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token keyword">class</span> <span class="token class-name">PlayerBuilder</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">build_face</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">build_body</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">build_arm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">build_leg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">SexyGirlBuild</span><span class="token punctuation">(</span>PlayerBuilder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>player <span class="token operator">=</span> Player<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">build_face</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>player<span class="token punctuation">.</span>face <span class="token operator">=</span> <span class="token string">"cute face"</span>    <span class="token keyword">def</span> <span class="token function">build_body</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>player<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">"thin body"</span>    <span class="token keyword">def</span> <span class="token function">build_arm</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>player<span class="token punctuation">.</span>arm <span class="token operator">=</span> <span class="token string">"snow arm"</span>    <span class="token keyword">def</span> <span class="token function">build_leg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>player<span class="token punctuation">.</span>leg <span class="token operator">=</span> <span class="token string">"long leg"</span><span class="token comment"># 控制组装顺序</span><span class="token keyword">class</span> <span class="token class-name">PlayerDirector</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">build_player</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> builder<span class="token punctuation">)</span><span class="token punctuation">:</span>        builder<span class="token punctuation">.</span>build_body<span class="token punctuation">(</span><span class="token punctuation">)</span>        builder<span class="token punctuation">.</span>build_face<span class="token punctuation">(</span><span class="token punctuation">)</span>        builder<span class="token punctuation">.</span>build_arm<span class="token punctuation">(</span><span class="token punctuation">)</span>        builder<span class="token punctuation">.</span>build_leg<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span>player<span class="token comment"># client</span>builder <span class="token operator">=</span> SexyGirlBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span>director <span class="token operator">=</span> PlayerDirector<span class="token punctuation">(</span><span class="token punctuation">)</span>p <span class="token operator">=</span> director<span class="token punctuation">.</span>build_player<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul><li>内容：保证一个类只有一个实例，并提供一个全局访问点去访问</li><li>优点：<ul><li>对唯一实例受控访问</li><li>单例相当于全局变量，防止了命名空间被污染</li></ul></li><li>应用场景：<ul><li>操作系统的文件系统</li><li>日志系统，只能有一个日志</li></ul></li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token string">"_instance"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>            <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance<span class="token keyword">class</span> <span class="token class-name">Myclass</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>c <span class="token operator">=</span> ca <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>b <span class="token operator">=</span> MyClass<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment"># 唯一实例：a, b 实例的 c 属性保持一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="创建型模式小结"><a href="#创建型模式小结" class="headerlink" title="创建型模式小结"></a>创建型模式小结</h2><ul><li>创建型模式包括工厂模式、抽象工厂模式、单例模式、建造者模式，原型模式、单例模式五类，主要用于对象的创建。</li><li>抽象工厂模式和建造者模式相对于简单工厂模式和工厂模式而言更灵活、更复杂。</li><li>通常优先使用简单工厂模式或工厂模式，需要更大的灵活性时根据需求使用建造者模式或者抽象工厂模式。</li></ul>]]></content>
    
    
    <categories>
      
      <category>码力升级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>科研绘图工具</title>
    <link href="/2022/03/01/%E7%A7%91%E7%A0%94%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/03/01/%E7%A7%91%E7%A0%94%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="Scienceplot-科研绘图工具"><a href="#Scienceplot-科研绘图工具" class="headerlink" title="Scienceplot 科研绘图工具"></a>Scienceplot 科研绘图工具</h1>]]></content>
    
    
    <categories>
      
      <category>实用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2022/03/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/03/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-设计模式"><a href="#Python-设计模式" class="headerlink" title="Python 设计模式"></a>Python 设计模式</h1><h2 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h2><ul><li>封装：将数据属性封装在类内</li><li>继承：类代码重用的一种方式</li><li>多态：继承的类具有多种形态，python 是多态语言 </li></ul><h2 id="接口规范模板"><a href="#接口规范模板" class="headerlink" title="接口规范模板"></a>接口规范模板</h2><p>接口：若干抽象方法的集合</p><ul><li>限制实现的接口的类必须安装规定的调用方式实现代码</li><li>对高层模块隐藏类的内部实现</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">class</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Alipay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"支付宝支付</span><span class="token interpolation"><span class="token punctuation">&#123;</span>money<span class="token punctuation">:</span><span class="token format-spec">4.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">元"</span></span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">WechatPay</span><span class="token punctuation">(</span>Payment<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> money<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"微信支付</span><span class="token interpolation"><span class="token punctuation">&#123;</span>money<span class="token punctuation">:</span><span class="token format-spec">4.2f</span><span class="token punctuation">&#125;</span></span><span class="token string">元"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="面向对象设计-SOLID-原则"><a href="#面向对象设计-SOLID-原则" class="headerlink" title="面向对象设计 SOLID 原则"></a>面向对象设计 SOLID 原则</h2><ul><li>开放封闭原则：软件实体应尽量在不改动原有代码的情况下扩展</li><li>里氏替换原则：所有引用父类的地方必须透明的使用子类的对象，即方法重写时必须保证接口一致</li><li>依赖倒置原则：高层模块不应该依赖底层模块，二者都应该依赖抽象类接口，针对接口编程</li><li>接口隔离原则：使用多个专门接口，而不使用单一的总接口</li><li>单一职责原则：不要存在多于一个导致类变更的原因，即使类变更的原因只能有一个</li></ul>]]></content>
    
    
    <categories>
      
      <category>码力升级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模型落地</title>
    <link href="/2022/02/22/%E6%A8%A1%E5%9E%8B%E8%90%BD%E5%9C%B0/"/>
    <url>/2022/02/22/%E6%A8%A1%E5%9E%8B%E8%90%BD%E5%9C%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Pytorch-模型落地"><a href="#Pytorch-模型落地" class="headerlink" title="Pytorch 模型落地"></a>Pytorch 模型落地</h1><h2 id="Tensorrt-模型构建方案"><a href="#Tensorrt-模型构建方案" class="headerlink" title="Tensorrt 模型构建方案"></a>Tensorrt 模型构建方案</h2><ul><li><a href="https://github.com/search?q=tensorrt">Tensorrt</a>: Nvidia 提供的 C++ 语言的深度学习模型推理方案，模型实现难度大。</li><li><a href="https://github.com/wang-xinyu/tensorrtx">TensorrtX</a>: 基于 tensorrt, 使用 C++ 硬代码实现了经典视觉模型，应用方便但扩展性极低。</li><li><a href="https://github.com/NVIDIA-AI-IOT/torch2trt">Torch2Trt</a>: Nvidia 公司 IOT 部门开源方案，提供 Python 端的操作实现方案，应用方便但无法跨硬件加速设备。</li><li><a href="https://github.com/shouxieai/tensorRT_Pro">TensorRt_Pro</a>: 基于 ONNX 路线，提供了 C++、Python 接口，但目前 ONNX 并无法支持 Pytorch 的全部操作。</li></ul><h2 id="ONNX-模型转换指导"><a href="#ONNX-模型转换指导" class="headerlink" title="ONNX 模型转换指导"></a>ONNX 模型转换指导</h2><ol><li>对于包含 shape、size 返回值的参数， 必须使用 int 进行规格化。</li><li>对于 Upsample, functional.interpolate 函数，使用 scale_factor 指定倍率而非使用 size 指定大小。</li><li>对于 reshape、view 等操作，-1 的指定设置在 batch 维度，其他维度计算得出。</li><li>使用 torch.onnx.export 函数时，dynamic_axes 参数指南指定 batch 维度。</li></ol><p>注: 这些做法的必要性在于简化过程复杂度去掉 gather, shape 等节点。</p>   <div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>          <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>numel <span class="token operator">//</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="动态模型处理"><a href="#动态模型处理" class="headerlink" title="动态模型处理"></a>动态模型处理</h2><ul><li>动态 batch<br>源自 TensorRT 编译时将 batch 固化，耗时固定，因此需要采用导出 batch。<ul><li>onnx 导出模型时，view 操作不能固定 batch 维度数值，改写成 -1</li><li>onnx 导出模型时，通常可以指定 dynamic_axes, 实际不指定也没有关系</li></ul></li><li>动态宽高<br>同上，源自模型编译时会将宽高固化，若后续宽高变化，则会影响使用，因此需要动态宽高的存在。<ul><li>使用 TRT::compile 函数的 inputsDimsSetup 参数定义输入的 shape</li><li>使用 TRT::set_layer_hook_reshape 钩子动态修改 reshape 的参数实现</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>模型部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tensorrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 日志处理</title>
    <link href="/2022/02/20/loguru%E5%BA%93/"/>
    <url>/2022/02/20/loguru%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-日志处理-Loguru-库"><a href="#Python-日志处理-Loguru-库" class="headerlink" title="Python 日志处理: Loguru 库"></a>Python 日志处理: Loguru 库</h1><h2 id="日志写入"><a href="#日志写入" class="headerlink" title="日志写入"></a>日志写入</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> loguru <span class="token keyword">import</span> logger<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Pathlogger_formate <span class="token operator">=</span> <span class="token string">"&#123;time&#125; - &#123;level&#125; - &#123;file&#125; - &#123;line&#125; - &#123;message&#125;"</span>logger<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Path<span class="token punctuation">(</span><span class="token string">"logpath.log"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> formate <span class="token operator">=</span> logger_formate<span class="token punctuation">)</span>logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">"debug message"</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"info level message"</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">"warning level message"</span><span class="token punctuation">)</span>logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">"critical level message"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="分类处理"><a href="#分类处理" class="headerlink" title="分类处理"></a>分类处理</h2><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> loguru <span class="token keyword">import</span> logger<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Pathlog_dir <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">not</span> log_dir<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    log_dir<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    log_format <span class="token operator">=</span> <span class="token string">"&#123;time:YYYY-MM-DD HH:mm:ss&#125; - &#123;level:8&#125;- &#123;file:10&#125; - &#123;line:5&#125; - &#123;message&#125;"</span>logger<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>log_dir<span class="token punctuation">,</span> Path<span class="token punctuation">(</span><span class="token string">"&#123;time:YYYY-MM-DD&#125;.log"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">format</span> <span class="token operator">=</span> log_format<span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token string">"3 day"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>实用工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown规范</title>
    <link href="/2022/02/20/markdown%E8%A7%84%E8%8C%83/"/>
    <url>/2022/02/20/markdown%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-编写规范"><a href="#Markdown-编写规范" class="headerlink" title="Markdown 编写规范"></a>Markdown 编写规范</h1><p>采用 GFM, 以及百度 fex-team 团队规范格式编写所有 markdown 文件。</p><h2 id="文件规范"><a href="#文件规范" class="headerlink" title="文件规范"></a>文件规范</h2><ul><li>文件后缀必须使用 .md</li><li>文件名必须使用小写</li><li>文件编码必须使用 UTF-8</li><li>文件标题书写采用如下规范, 使用 26个 = 号隔开</li></ul><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important">Markdown 规范<span class="token punctuation">==========================</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><h2 id="章节规范"><a href="#章节规范" class="headerlink" title="章节规范"></a>章节规范</h2><ul><li>章节标题必须以 ## 开始</li><li>章节标题与内容之间必须包含一个空行</li></ul><h2 id="表格规范"><a href="#表格规范" class="headerlink" title="表格规范"></a>表格规范</h2><ul><li>使用 - 和 | 符号创建表格, 表格与内容之间插入空行</li></ul><table><thead><tr><th>第一行</th><th>第二行</th></tr></thead><tbody><tr><td>内容1</td><td>内容2</td></tr><tr><td>内容3</td><td>内容4</td></tr></tbody></table><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">第一行 | 第二行 ----- | ----- 内容1 | 内容2 内容3 | 内容4 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ul><li>代码块插入使用连续两个 ``` </li><li>代码块中插入 ``` 代码时使用 ````代替</li><li>代码块与文本之间插入空行</li></ul><div class="code-wrapper"><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token code"><span class="token punctuation">```</span><span class="token code-language"> markdown [文本块](超链接)</span><span class="token code-block language-markdown"><span class="token title important"><span class="token punctuation">##</span> 演示使用</span></span><span class="token punctuation">```</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h2 id="正文规范"><a href="#正文规范" class="headerlink" title="正文规范"></a>正文规范</h2><ul><li>英文和数字使用半角字符</li><li>中文文字之间不使用空格</li><li>中文文字与英文、阿拉伯数字及 @ $ % ^ &amp; * . () 之间使用空格</li><li>中文标点之间不加空格</li><li>中文标点与前后字符之间均不加空格</li><li>若括号内有中文，使用中文括号</li><li>若括号内全部为英文，则使用半角英文符号</li><li>使用直角引号 (「」) 代替双引号</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://gfm.docschina.org/zh-hans/">GFM</a> : Github建议使用的markdown文件书写规范</p>]]></content>
    
    
    <categories>
      
      <category>书写规范</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法刷题</title>
    <link href="/2022/02/19/%E5%88%B7%E9%A2%98/"/>
    <url>/2022/02/19/%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="Leetcode-不同路径-II"><a href="#Leetcode-不同路径-II" class="headerlink" title="Leetcode 不同路径 II"></a>Leetcode 不同路径 II</h2><p>源题链接：<a href="https://leetcode-cn.com/problems/unique-paths-ii/">https://leetcode-cn.com/problems/unique-paths-ii/</a></p><ul><li>存在障碍时，第一行第一列初始值设定时需格外注意，其余动态规划即可。</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePathsWithObstacles</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obstacleGrid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">elif</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">elif</span> obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                    obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> obstacleGrid<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Leetcode-最大连续和"><a href="#Leetcode-最大连续和" class="headerlink" title="Leetcode 最大连续和"></a>Leetcode 最大连续和</h2><p>源题链接：<a href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/</a></p><ul><li>动态规划：dp[i] = max (dp[i], dp[i-1]+dp[i])</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        ans <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Leetcode-最近公共祖先"><a href="#Leetcode-最近公共祖先" class="headerlink" title="Leetcode 最近公共祖先"></a>Leetcode 最近公共祖先</h2><p>源题链接：<a href="https://leetcode-cn.com/problems/first-common-ancestor-lcci/">https://leetcode-cn.com/problems/first-common-ancestor-lcci/</a></p><ul><li>动态规划：深度优先递归搜索</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :type p: TreeNode        :type q: TreeNode        :rtype: TreeNode        """</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> root <span class="token keyword">or</span> root <span class="token operator">==</span> p <span class="token keyword">or</span> root <span class="token operator">==</span> q<span class="token punctuation">:</span>            <span class="token keyword">return</span> root        left <span class="token operator">=</span> self<span class="token punctuation">.</span>lowestCommonAncestor<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>        right <span class="token operator">=</span> self<span class="token punctuation">.</span>lowestCommonAncestor<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>        <span class="token keyword">if</span> left <span class="token keyword">and</span> right<span class="token punctuation">:</span>            <span class="token keyword">return</span> root        <span class="token keyword">if</span> left<span class="token punctuation">:</span>            <span class="token keyword">return</span> left        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> right<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="Leetcode-最大连续和-1"><a href="#Leetcode-最大连续和-1" class="headerlink" title="Leetcode 最大连续和"></a>Leetcode 最大连续和</h2><p>源题链接：<a href="https://leetcode-cn.com/problems/maximum-subarray/">https://leetcode-cn.com/problems/maximum-subarray/</a></p><ul><li>动态规划：深度优先递归搜索</li></ul><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        ans <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            ans <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="刷题技巧"><a href="#刷题技巧" class="headerlink" title="刷题技巧"></a>刷题技巧</h2><h5 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h5><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 快速排序</span><span class="token keyword">def</span> <span class="token function">q_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> l <span class="token operator">>=</span> r<span class="token punctuation">:</span>        <span class="token keyword">return</span>    x <span class="token operator">=</span> num<span class="token punctuation">[</span>l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span>    i<span class="token punctuation">,</span> j <span class="token operator">=</span> l<span class="token punctuation">,</span> r    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>        <span class="token keyword">while</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">while</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">:</span>            j <span class="token operator">-=</span> <span class="token number">1</span>        num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    q_sort<span class="token punctuation">(</span>num<span class="token punctuation">,</span> l<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token comment"># 注意从j截止</span>    q_sort<span class="token punctuation">(</span>num<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h5 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h5><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">取余：x % y &#x3D;&#x3D; x &amp; ( ~y)异或: a ^ a &#x3D; 0奇偶：x &amp; 1 除二下取整：&gt;&gt;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h5 id="四舍五入取整"><a href="#四舍五入取整" class="headerlink" title="四舍五入取整"></a>四舍五入取整</h5><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h5 id="回文串"><a href="#回文串" class="headerlink" title="回文串"></a>回文串</h5><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">回文串字符之间补字符 #, 使所有回文串变成奇数回文串奇数回文：a # b # a偶数回文：a # a # b # b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>码力升级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建blog</title>
    <link href="/2022/02/19/hexo%E6%90%AD%E5%BB%BAblog/"/>
    <url>/2022/02/19/hexo%E6%90%AD%E5%BB%BAblog/</url>
    
    <content type="html"><![CDATA[<h1 id="基于Hexo搭建Blog"><a href="#基于Hexo搭建Blog" class="headerlink" title="基于Hexo搭建Blog"></a>基于Hexo搭建Blog</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><div class="code-wrapper"><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install hexo-cli -ghexo init &lt;folder&gt;npm installhexo new blogname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><ul><li>将下载的主题存储在 themes 文件夹</li><li>在 _config.yml 文件中修改配置即可</li></ul>]]></content>
    
    
    <categories>
      
      <category>工具经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
